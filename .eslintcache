[{"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/App.js":"1","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/index.js":"2","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/Demo.js":"3","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/icons/index.js":"4","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/utils/day/index.js":"5","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/index.js":"6","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/styled/index.js":"7","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/tokens.js":"8","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/GlobalStyle.js":"9","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Welcome.js":"10","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Chat.js":"11","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Settings.js":"12","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/config.js":"13","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/Config.js":"14"},{"size":603,"mtime":1610209244543,"results":"15","hashOfConfig":"16"},{"size":350,"mtime":1610205331835,"results":"17","hashOfConfig":"16"},{"size":1417,"mtime":1609798999105,"results":"18","hashOfConfig":"16"},{"size":728,"mtime":1610159801018,"results":"19","hashOfConfig":"16"},{"size":4416,"mtime":1609829706749,"results":"20","hashOfConfig":"16"},{"size":4517,"mtime":1610205234885,"results":"21","hashOfConfig":"16"},{"size":12566,"mtime":1610211519523,"results":"22","hashOfConfig":"16"},{"size":1340,"mtime":1610209344167,"results":"23","hashOfConfig":"16"},{"size":521,"mtime":1610209341661,"results":"24","hashOfConfig":"16"},{"size":3417,"mtime":1610204751275,"results":"25","hashOfConfig":"16"},{"size":2636,"mtime":1610211336773,"results":"26","hashOfConfig":"16"},{"size":3443,"mtime":1610204752514,"results":"27","hashOfConfig":"16"},{"size":264,"mtime":1610205243972,"results":"28","hashOfConfig":"16"},{"size":262,"mtime":1610206013309,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"16klvty",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"35"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"45"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/App.js",["71","72"],"import GlobalStyle from \"./GlobalStyle\";\nimport Demo from \"./components/Demo\";\nimport ChatWidget from \"./components/ChatWidget\";\n\nimport PubNub from \"pubnub\";\nimport { PubNubProvider } from \"pubnub-react\";\n\nimport { v4 as uuid } from \"uuid\";\n\nimport config from \"./Config\";\n\nconst pubnub = new PubNub({\n  publishKey: config.pubnub.publishKey,\n  subscribeKey: config.pubnub.subscribeKey,\n  uuid: uuid(),\n});\n\nexport default () => {\n  return (\n    <PubNubProvider client={pubnub}>\n      <GlobalStyle />\n      <ChatWidget icon={config.icon} channel={config.pubnub.channel} />\n    </PubNubProvider>\n  );\n};\n","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/index.js",[],["73","74"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/Demo.js",["75","76","77","78","79"],"import styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-flow: column wrap;\n  align-items: center;\n  // border: 2px solid red; // debug\n`;\n\nconst Title = styled.h1`\n  // bold text with inter font\n  font-family: Inter;\n  font-weight: 600;\n`;\nconst Text = styled.p`\n  // bold text with inter font\n  font-family: Inter;\n  font-weight: 400;\n`;\n\nconst Separator = styled.div`\n  width: 100%;\n  padding: 10px;\n  box-sizing: border-box;\n  // border: 2px solid red; // debug\n`;\n\nexport default () => {\n  return (\n    <Container>\n      <Title>Example Website</Title>\n      <Text>Hello world. This my example chat widget app.</Text>\n      <Separator />\n      <Separator />\n      <img src=\"https://lh3.googleusercontent.com/proxy/D4HxYx7UDOzSogrTPB1DWvHtUfQYqD8ZbStMwWcY4a94hDxzc8_Fkmj7BqQRi61J_hjE8zNMoyODa4XCf6s8BmXCwyo1aob7uW-0qZ2xrn5l1kre\" />\n      <img src=\"https://lh3.googleusercontent.com/proxy/D4HxYx7UDOzSogrTPB1DWvHtUfQYqD8ZbStMwWcY4a94hDxzc8_Fkmj7BqQRi61J_hjE8zNMoyODa4XCf6s8BmXCwyo1aob7uW-0qZ2xrn5l1kre\" />\n      <img src=\"https://lh3.googleusercontent.com/proxy/D4HxYx7UDOzSogrTPB1DWvHtUfQYqD8ZbStMwWcY4a94hDxzc8_Fkmj7BqQRi61J_hjE8zNMoyODa4XCf6s8BmXCwyo1aob7uW-0qZ2xrn5l1kre\" />\n      <img src=\"https://lh3.googleusercontent.com/proxy/D4HxYx7UDOzSogrTPB1DWvHtUfQYqD8ZbStMwWcY4a94hDxzc8_Fkmj7BqQRi61J_hjE8zNMoyODa4XCf6s8BmXCwyo1aob7uW-0qZ2xrn5l1kre\" />\n    </Container>\n  );\n};\n","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/icons/index.js",["80"],"import { ReactComponent as ArrowLeft } from \"./arrow-left.svg\";\nimport { ReactComponent as Multiply } from \"./multiply.svg\";\nimport { ReactComponent as Gear } from \"./gear.svg\";\nimport { ReactComponent as Heart } from \"./heart-alt.svg\";\nimport { ReactComponent as Runner } from \"./runner.svg\";\nimport { ReactComponent as Donate } from \"./donate.svg\";\nimport { ReactComponent as Circle } from \"./circle.svg\";\nimport { ReactComponent as Chat } from \"./chat.svg\";\nimport { ReactComponent as CheckCircle } from \"./check-circle.svg\";\n\nexport default {\n  \"arrow-left\": ArrowLeft,\n  multiply: Multiply,\n  gear: Gear,\n  heart: Heart,\n  runner: Runner,\n  donate: Donate,\n  circle: Circle,\n  \"check-circle\": CheckCircle,\n  chat: Chat,\n};\n","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/utils/day/index.js",["81"],"import { isObject } from \"@doubco/wtf\";\nimport dayjs from \"dayjs\";\nimport localizedFormat from \"dayjs/plugin/localizedFormat\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\nimport customParseFormat from \"dayjs/plugin/customParseFormat\";\nimport isBetween from \"dayjs/plugin/isBetween\";\n\nimport en_gb from \"dayjs/locale/en-gb\";\nimport tr from \"dayjs/locale/tr\";\n\ndayjs.extend(customParseFormat);\ndayjs.extend(localizedFormat);\ndayjs.extend(relativeTime);\ndayjs.extend(isBetween);\nclass Day {\n  constructor(props) {\n    const en = dayjs.en;\n\n    this.instance = dayjs;\n\n    // console.log(\"this.localeData\", this.localeData);\n    this.localeDatas = {\n      en,\n      en_gb,\n    };\n    this.localeData = this.localeDatas.en;\n  }\n\n  getCurrentLocale() {\n    return this.localeData.name;\n  }\n\n  day(...args) {\n    return this.instance(...args).locale(this.getCurrentLocale());\n  }\n\n  format(date, f, options = {}) {\n    let format = f;\n\n    if (format) {\n      Object.keys(this.localeData.formats).forEach((k) => {\n        format = format.replace(new RegExp(k), this.localeData.formats[k]);\n      });\n    }\n\n    return this.day(date).format(format);\n  }\n\n  formatDistance(date, from, options = { isRaw: false }) {\n    return this.day(date).from(from, options.isRaw);\n  }\n\n  toDate(date, options = {}) {\n    let opts = { ...options };\n\n    if (opts.format) {\n      Object.keys(this.localeData.formats).forEach((k) => {\n        opts.format = opts.format.replace(\n          new RegExp(k),\n          this.localeData.formats[k]\n        );\n      });\n    }\n    // console.log(\"toDate\", this.day(date, opts).toDate());\n    return this.day(date, opts).toDate();\n  }\n\n  toJSON(date, options = {}) {\n    return this.day(date, options).toJSON();\n  }\n\n  isValid(date, options = {}) {\n    return this.day(date, options).isValid();\n  }\n\n  date(date, options = {}) {\n    return this.day(date).date();\n  }\n\n  diff(date, compared, unit, options = {}) {\n    return this.day(date).diff(compared, unit, options.float);\n  }\n\n  weekday(date, options = {}) {\n    return this.day(date).day();\n  }\n\n  month(date, options = {}) {\n    return this.day(date).month();\n  }\n\n  year(date, options = {}) {\n    return this.day(date).year();\n  }\n\n  hour(date, options = {}) {\n    return this.day(date).hour();\n  }\n\n  minute(date, options = {}) {\n    return this.day(date).minute();\n  }\n\n  daysInMonth(date, options = {}) {\n    return this.day(date).daysInMonth();\n  }\n\n  set(unit, date, value, options = {}) {\n    return this.day(date).set(unit, value);\n  }\n\n  add(unit, date, value, options = {}) {\n    return this.day(date).add(value, unit);\n  }\n\n  subtract(unit, date, value, options = {}) {\n    return this.day(date).subtract(value, unit);\n  }\n\n  isBetween(date, start, end, options = { type: null }) {\n    return this.day(date).isBetween(start, end, options.type);\n  }\n\n  getFormat(format, options = {}) {\n    return this.localeData.formats[format];\n  }\n\n  getLocaleData(locale = this.getCurrentLocale(), options = {}) {\n    return this.localeDatas[locale];\n  }\n\n  getWeekdays(i) {\n    return this.localeData.weekdays[i] || \"\";\n  }\n\n  getWeekdaysShort(i) {\n    return this.localeData.weekdaysShort\n      ? this.localeData.weekdaysShort[i]\n      : this.getWeekdays(i).substr(0, 3);\n  }\n\n  getFormatAsArray() {\n    let data = this.localeData;\n    let date = [];\n    let time = [\"h\", \"m\"];\n    let l = data.formats[\"L\"];\n    let lt = data.formats[\"LT\"];\n    l = l.toLowerCase().replace(/-/g, \".\").replace(/\\//g, \".\");\n    date = l.split(\".\").map((i) => i.substr(0, 1));\n\n    if (lt.includes(\"A\")) {\n      time.push(\"a\");\n    }\n\n    return {\n      date,\n      time,\n    };\n  }\n\n  createContext(locale) {\n    return this.localeDatas[locale];\n  }\n\n  registerContext(context) {\n    if (context) {\n      this.localeData = context;\n      this.localeDatas[context.name] = context;\n      this.instance.locale(context);\n    }\n  }\n\n  locale(locale, callback) {\n    if (isObject(locale)) {\n      this.localeData = locale;\n      this.localeDatas[locale.name] = locale;\n      this.instance.locale(locale);\n      if (callback) callback();\n    } else {\n      if (this.localeDatas[locale]) {\n        this.localeData = this.localeDatas[locale];\n        if (callback) callback();\n      } else {\n        this.localeDatas[locale] = this.localeData;\n        this.instance.locale(locale);\n        if (callback) callback();\n      }\n    }\n  }\n}\n\nexport default new Day();\n",["82","83"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/index.js",["84","85"],"import React, {\n  useRef,\n  useEffect,\n  useState,\n  createContext,\n  useContext,\n} from \"react\";\nimport {\n  Container,\n  CollapsedChatContainer,\n  TopBar,\n  Button,\n  Icon,\n  Text,\n} from \"./styled\";\nimport Settings from \"./Settings\";\nimport Chat from \"./Chat\";\nimport Welcome from \"./Welcome\";\nimport { usePubNub } from \"pubnub-react\";\nimport tokens from \"./tokens\";\n\nconst Context = createContext();\n\nexport const ChatWidget = (props) => {\n  const { channel = \"awesome-channel\", icon = \"chat\" } = props;\n  const [collapsed, setCollapsed] = useState(true);\n  const [screen, setScreen] = useState(tokens.screens.welcome);\n  const [username, setUsername] = useState(\"\");\n  const [avatar, setAvatar] = useState(\"\");\n\n  // pubnub\n  const pubnub = usePubNub();\n  const [channels, setChannels] = useState([channel]);\n  const [messages, addMessage] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const handleMessage = (event) => {\n    const msg = event.message;\n    addMessage((messages) => [...messages, msg]);\n  };\n  useEffect(() => {\n    pubnub.addListener({ message: handleMessage });\n    pubnub.subscribe({ channels });\n  }, [pubnub, channels]);\n\n  const sendMessage = (msg) => {\n    if (msg) {\n      pubnub.publish({ channel: channels[0], message: msg }).then(() => {\n        setMessage(\"\");\n        scrollToEnd();\n      });\n    }\n  };\n  // pubnub\n\n  const isUsernameValid = (name) => {\n    const i = messages.findIndex((m) => {\n      return m.sender.name === name;\n    });\n\n    return name !== \"\" && (name == username || i === -1);\n  };\n\n  const listRef = useRef(null);\n  const scrollToEnd = (el = listRef.current) => {\n    if (el) {\n      setTimeout(() => {\n        el.scrollTop = el.scrollHeight + 100;\n      }, 200);\n    }\n  };\n\n  useEffect(() => {\n    scrollToEnd();\n  }, []);\n\n  return (\n    <Context.Provider\n      value={{\n        username,\n        setUsername,\n        avatar,\n        setAvatar,\n        screen,\n        setScreen,\n        collapsed,\n        setCollapsed,\n        message,\n        setMessage,\n        messages,\n        sendMessage,\n        isUsernameValid,\n      }}\n    >\n      {!collapsed && (\n        <Container palette=\"dark\">\n          <TopBar>\n            <Button\n              title=\"get the hell outta here!\"\n              palette=\"none\"\n              hoverpalette=\"darkgrey\"\n              activepalette=\"grey\"\n              onClick={(e) => {\n                setCollapsed(true);\n              }}\n            >\n              <Icon name=\"runner\" palette=\"white\" />\n            </Button>\n            <Text size=\"small\" weight=\"bold\">\n              welcome!\n            </Text>\n            <Button\n              title=\"preferences\"\n              palette=\"none\"\n              hoverpalette=\"darkgrey\"\n              activepalette=\"grey\"\n              clear={screen === tokens.screens.welcome}\n              onClick={\n                screen !== tokens.screens.welcome\n                  ? (e) => {\n                      setScreen(tokens.screens.settings);\n                    }\n                  : null\n              }\n            >\n              {screen !== tokens.screens.welcome && (\n                <Icon name=\"gear\" palette=\"white\" />\n              )}\n            </Button>\n          </TopBar>\n\n          {screen === tokens.screens.chat && (\n            <Chat\n              username={username}\n              avatar={avatar}\n              setScreen={setScreen}\n              setCollapsed={setCollapsed}\n            />\n          )}\n          {screen === tokens.screens.welcome && (\n            <Welcome\n              setUsername={setUsername}\n              setAvatar={setAvatar}\n              setScreen={setScreen}\n              setCollapsed={setCollapsed}\n            />\n          )}\n          {screen === tokens.screens.settings && (\n            <Settings\n              username={username}\n              avatar={avatar}\n              setUsername={setUsername}\n              setAvatar={setAvatar}\n              setScreen={setScreen}\n              setCollapsed={setCollapsed}\n            />\n          )}\n        </Container>\n      )}\n      {collapsed && (\n        <CollapsedChatContainer>\n          <Button\n            clear\n            onClick={(e) => {\n              setCollapsed(false);\n            }}\n          >\n            <Icon name={icon} scale=\"sc+2\" palette=\"black\" />\n          </Button>\n        </CollapsedChatContainer>\n      )}\n    </Context.Provider>\n  );\n};\n\nexport const useChatWidget = () => {\n  return useContext(Context);\n};\n\nexport default ChatWidget;\n","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/styled/index.js",["86","87","88","89","90","91","92","93","94","95","96"],"import React, { useRef, useState, useEffect } from \"react\";\nimport styled, { css, keyframes } from \"styled-components\";\nimport tokens from \"../tokens\";\nimport icons from \"../../../icons\";\nimport day from \"../../../utils/day\";\n\nexport const CollapsedChatContainer = styled.div`\n  z-index: 99999;\n  position: fixed;\n  bottom: ${tokens.padding[\"sp+3\"]};\n  right: ${tokens.padding[\"sp+3\"]};\n`;\n\nexport const Container = styled.div`\n  z-index: 99999;\n  // desktop\n  @media only screen and (min-width: 600px) {\n    position: fixed;\n    // size\n    width: 400px;\n    height: calc(100vh - 32px);\n\n    // margins\n    top: ${tokens.padding[\"sp+2\"]};\n    bottom: ${tokens.padding[\"sp+2\"]};\n    right: ${tokens.padding[\"sp+2\"]};\n\n    border-radius: ${tokens.radius[\"ra+1\"]};\n  }\n  // mobile\n  @media only screen and (max-width: 600px) {\n    position: absolute;\n    width: calc(100vw - 4px);\n    // height: calc(${window.innerHeight}px - 4px);\n    height: calc(100% - 4px);\n    top: 0px;\n    left: 0px;\n    margin: 2px;\n    border-radius: ${tokens.radius[\"ra+1\"]};\n  }\n\n  // display\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  // color\n  background: ${(props) => tokens.palette[props.palette]};\n  box-shadow: 0px 0px 12px 6px rgba(0, 0, 0, 0.4);\n`;\n\nContainer.defaultProps = { palette: \"dark\" };\n\nexport const Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n`;\n\nexport const Separator = styled.div`\n  width: 100%;\n  box-sizing: border-box;\n  padding: ${(props) => tokens.padding[props.spacing]};\n  border-bottom: ${(props) => tokens.border[props.border]} solid\n    ${(props) => tokens.palette[props.palette]};\n  border-radius: ${tokens.radius[\"ra+4\"]};\n`;\nSeparator.defaultProps = { spacing: \"sp+0\", border: \"bo+0\", palette: \"white\" };\n\nexport const TopBar = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  padding-left: ${tokens.padding[\"sp+3\"]};\n  padding-right: ${tokens.padding[\"sp+3\"]};\n  padding-top: ${tokens.padding[\"sp+2\"]};\n  padding-bottom: ${tokens.padding[\"sp+2\"]};\n\n  position: static;\n  box-sizing: border-box;\n  width: 100%;\n  left: 0px;\n  top: 0px;\n`;\n\nexport const BottomBar = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: ${tokens.padding[\"sp+2\"]};\n\n  position: static;\n  box-sizing: border-box;\n  width: 100%;\n  left: 0px;\n  bottom: 0px;\n`;\n\nexport const Button = styled.button`\n  display: block;\n  // background color\n  background: ${(props) =>\n    !props.clear ? tokens.palette[props.palette] : tokens.palette[\"none\"]};\n\n  // border\n  border: ${(props) => tokens.border[props.border]} solid\n    ${(props) => tokens.palette[props.palette]};\n\n  // radius\n  border-radius: ${(props) => tokens.radius[props.radius]};\n\n  // spacing\n  padding: ${(props) => tokens.padding[props.padding]};\n  margin: ${(props) => tokens.margin[props.margin]};\n\n  // animation\n  transition: all 0.2s;\n\n  // hover\n  &:hover {\n    background: ${(props) =>\n      !props.clear\n        ? tokens.palette[props.hoverpalette]\n        : tokens.palette[\"none\"]};\n    border: ${(props) => tokens.border[props.border]} solid\n      ${(props) =>\n        !props.clear\n          ? tokens.palette[props.hoverpalette]\n          : tokens.palette[\"none\"]};\n\n    & > svg > * {\n      ${(props) =>\n        props.clear\n          ? css`\n              fill: ${(props) => tokens.palette[props.hoverpalette]};\n            `\n          : \"\"}\n    }\n  }\n  &:active {\n    background: ${(props) =>\n      !props.clear\n        ? tokens.palette[props.activepalette]\n        : tokens.palette[\"none\"]};\n    border: ${(props) => tokens.border[props.border]} solid\n      ${(props) =>\n        !props.clear\n          ? tokens.palette[props.activepalette]\n          : tokens.palette[\"none\"]};\n\n    & > svg > * {\n      ${(props) =>\n        props.clear\n          ? css`\n              fill: ${(props) => tokens.palette[props.activepalette]};\n            `\n          : \"\"}\n    }\n  }\n\n  // cursor\n\n  cursor: ${(props) => (!props.onClick ? \"default\" : \"pointer\")};\n`;\n\nButton.defaultProps = {\n  palette: \"none\",\n  hoverpalette: \"grey\",\n  activepalette: \"lightgrey\",\n  radius: \"ra+1\",\n  padding: \"sp+1\",\n  margin: \"sp+0\",\n  border: \"bo+0\",\n};\n\nexport const Icon = (props) => {\n  const { name } = props;\n  if (!(name in icons)) {\n    throw \"Specified icon not in icons.\";\n  }\n\n  let palette = props.palette;\n  if (!palette) palette = \"lightgrey\";\n\n  let scale = props.scale;\n  if (!scale) scale = \"sc+0\";\n  const Svg = icons[name];\n  return (\n    <Svg\n      style={{\n        width: tokens.iconscale[props.scale],\n        height: tokens.iconscale[props.scale],\n        fill: tokens.palette[props.palette],\n      }}\n    />\n  );\n};\n\nexport const Text = styled.text`\n  font-family: ${(props) => tokens.font[props.font]};\n  font-style: normal;\n  font-weight: ${(props) => tokens.fontweight[props.weight]};\n  font-size: ${(props) => tokens.fontsize[props.size]};\n  line-height: ${(props) => tokens.fontlineheight[props.size]};\n  color: ${(props) => tokens.palette[props.palette]};\n`;\n\nText.defaultProps = {\n  font: \"regular\",\n  size: \"small\",\n  weight: \"regular\",\n  palette: \"white\",\n};\n\nexport const StyledTextInput = styled.input`\n  width: 100%;\n  background: ${(props) => tokens.palette.darkgrey};\n  border-radius: ${tokens.radius[\"ra+1\"]};\n  border: 0px;\n  padding: ${tokens.padding[\"sp+2\"]};\n  box-sizing: border-box;\n\n  // placeholder\n  ::-webkit-input-placeholder {\n    font-style: normal;\n    font-family: ${(props) => tokens.font[props.font]};\n    font-weight: ${(props) => tokens.fontweight[props.weight]};\n    font-size: ${(props) => tokens.fontsize[props.size]};\n    line-height: ${(props) => tokens.fontlineheight[props.size]};\n    color: ${tokens.palette.grey};\n  }\n\n  &:focus {\n    box-shadow: 0 0 0 2px ${tokens.palette.grey} inset;\n  }\n\n  transition: box-shadow 0.2s;\n\n  // text input\n  font-style: normal;\n  font-family: ${(props) => tokens.font[props.font]};\n  font-weight: ${(props) => tokens.fontweight[props.weight]};\n  font-size: ${(props) => tokens.fontsize[props.size]};\n  line-height: ${(props) => tokens.fontlineheight[props.size]};\n  color: ${tokens.palette.white};\n`;\n\nStyledTextInput.defaultProps = {\n  font: \"regular\",\n  size: \"small\",\n  weight: \"regular\",\n};\nconst InputContainer = styled.div`\n  position: relative;\n  width: 100%;\n`;\nconst InputAction = styled(Button)`\n  position: absolute;\n  // z-index: 99999999;\n  right: 0px;\n  bottom: 4px;\n  opacity: ${(props) => (props.visible ? 1 : 0)};\n`;\n\nInputAction.defaultProps = { visible: false };\n\nexport const TextInput = (props) => {\n  const { onSubmit = (value) => {}, action } = props;\n\n  return (\n    <InputContainer>\n      <StyledTextInput\n        {...props}\n        onKeyUp={(event) => {\n          if (event.key === \"Enter\" && event.target.value !== \"\") {\n            onSubmit(event.target.value);\n          }\n        }}\n      />\n      {action && (\n        <InputAction\n          clear\n          title={action.title}\n          hoverpalette={action.palette}\n          activepalette={action.onClick ? action.activepalette : action.palette}\n          visible={props.value.length < 30}\n          onClick={action.onClick}\n        >\n          <Icon name={action.icon} palette={action.palette} />\n        </InputAction>\n      )}\n    </InputContainer>\n  );\n};\nexport const WelcomeContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  padding-left: ${tokens.padding[\"sp+3\"]};\n  padding-right: ${tokens.padding[\"sp+3\"]};\n`;\n\nconst GridSelectContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  justify-content: space-between;\n  width: 100%;\n\n  background: ${(props) => tokens.palette[props.palette]};\n  border-radius: ${tokens.radius[\"ra+1\"]};\n`;\n\nGridSelectContainer.defaultProps = { palette: \"darkgrey\" };\n\nconst ImageGrid = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n  align-items: flex-start;\n  width: 100%;\n  margin: ${tokens.margin[\"sp+1\"]};\n`;\n\nconst ImageInGrid = styled.img`\n  width: 48px;\n  height: auto;\n\n  &:hover {\n    opacity: 0.7;\n  }\n\n  // border: ${(props) => tokens.border[props.border]} solid\n  //   ${(props) => tokens.palette[props.palette]};\n  border-radius: ${tokens.radius[\"ra+1\"]};\n\n  cursor: pointer;\n\n  transition: all 0.2s;\n`;\n\nconst ImageInGridContainer = styled.div`\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n\n  margin: ${tokens.margin[\"sp+1\"]};\n  box-shadow: 0 0 0 ${(props) => tokens.border[props.border]}\n    ${(props) => tokens.palette[props.palette]};\n  border-radius: ${tokens.radius[\"ra+1\"]};\n\n  transition: all 0.2s;\n`;\n\nImageInGridContainer.defaultProps = {\n  palette: \"green\",\n  border: \"bo+0\",\n};\nexport const GridSelectImage = (props) => {\n  const { onSelect, action, images = [], value = \"\" } = props;\n  const [selected, setSelected] = useState(\n    images.findIndex((e) => e === value)\n  );\n\n  return (\n    <GridSelectContainer>\n      <ImageGrid>\n        {images.map((image, i) => (\n          <ImageInGridContainer\n            key={`grod-image-select-${i}`}\n            palette=\"green\"\n            border={selected === i ? \"bo+2\" : \"bo+0\"}\n          >\n            <ImageInGrid\n              src={image}\n              onClick={(e) => {\n                setSelected(i);\n                onSelect(image);\n              }}\n            />\n          </ImageInGridContainer>\n        ))}\n      </ImageGrid>\n      {action && (\n        <Button\n          clear\n          hoverpalette={action.palette}\n          activepalette={action.onClick ? action.activepalette : action.palette}\n          onClick={action.onClick}\n        >\n          <Icon name={action.icon} palette={action.palette} />\n        </Button>\n      )}\n    </GridSelectContainer>\n  );\n};\n\nexport const ChatContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  box-sizing: border-box;\n  padding-left: ${tokens.padding[\"sp+3\"]};\n  padding-right: ${tokens.padding[\"sp+3\"]};\n\n  position: static;\n  width: 100%;\n  height: 100%;\n\n  overflow-y: scroll;\n\n  // border: 2px solid red;\n`;\n\nconst MessageContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n\n  position: static;\n  width: 100%;\n\n  // border: 2px solid red;\n`;\nconst MessageSenderContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst MessageSenderName = styled(Text)`\n  margin-left: ${tokens.padding[\"sp+2\"]};\n`;\n\nMessageSenderName.defaultProps = {\n  font: \"regular\",\n  size: \"small\",\n  weight: \"bold\",\n  palette: \"white\",\n};\n\nconst MessageSenderImage = styled.img`\n  width: 32px;\n  height: auto;\n  border-radius: ${tokens.radius[\"ra+1\"]};\n`;\n\nconst MessageBodyContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-end;\n  justify-content: space-between;\n\n  width: 100%;\n`;\n\nconst MessageText = styled(Text)`\n  width: 100%;\n  word-break: break-word;\n`;\n\nMessageText.defaultProps = {\n  font: \"regular\",\n  size: \"small\",\n  weight: \"regular\",\n  palette: \"white\",\n};\n\nconst MessageTime = styled(Text)`\n  opacity: 50%;\n`;\n\nMessageTime.defaultProps = {\n  font: \"regular\",\n  size: \"extrasmall\",\n  weight: \"bold\",\n  palette: \"white\",\n};\n\nconst MessageImage = styled.div``;\n\nconst getDateTime = (date) => {\n  const today = new Date();\n  let format;\n\n  // If date is today only display hour and minute\n  if (day.format(today, \"DD MM YYYY\") == day.format(date, \"DD MM YYYY\")) {\n    format = \"HH:mm\";\n  } else if (day.year(today) == day.year(date)) {\n    format = \"DD MMM HH:mm\";\n  } else {\n    format = \"DD MMM YYYY HH:mm\";\n  }\n\n  return day.format(date, format);\n};\n\nexport const TextMessage = (props) => {\n  const { message, onlybody = false } = props;\n  const { sender, text, createdAt } = message;\n  const time = getDateTime(createdAt);\n  return (\n    <MessageContainer>\n      {!onlybody && (\n        <MessageSenderContainer>\n          <MessageSenderImage src={sender.image} />\n          <MessageSenderName>{sender.name}</MessageSenderName>\n        </MessageSenderContainer>\n      )}\n      <Separator spacing=\"sp+1\" />\n      <MessageBodyContainer>\n        <MessageText>{text}</MessageText>\n        <MessageTime>{time}</MessageTime>\n      </MessageBodyContainer>\n    </MessageContainer>\n  );\n};\n\nexport const ImageMessage = (props) => {\n  const { sender, text, image, onlybody } = props;\n};\n","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/tokens.js",["97"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/GlobalStyle.js",["98"],"import styled, { createGlobalStyle } from \"styled-components\";\n\nexport default createGlobalStyle`\n    // default font face\n    // @import url(\"https://fonts.googleapis.com/css2?family=Bodoni+Moda:wght@500;700&display=swap\");\n    // font-family: 'Bodoni Moda' serif;\n    \n    @import url(\"https://fonts.googleapis.com/css2?family=Quicksand:wght@500;700&display=swap\");\n    font-family: 'Quicksand' serif;\n\n    // remove button outline\n    button {\n        outline: 0;\n    }\n\n    input {\n        outline: none;\n    }\n  \n`;\n","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Welcome.js",["99","100","101","102"],"import React, { useRef, useEffect, useState, Fragment } from \"react\";\nimport {\n  TopBar,\n  WelcomeContainer,\n  GridSelectImage,\n  Button,\n  Icon,\n  Text,\n  TextInput,\n  Separator,\n} from \"./styled\";\nimport tokens from \"./tokens\";\nimport { useChatWidget } from \"./index\";\n\nconst Welcome = (props) => {\n  const chatWidget = useChatWidget();\n  const [username, setUsername] = useState(chatWidget.username);\n  const [avatar, setAvatar] = useState(chatWidget.avatar);\n\n  const [inputsValid, setInputsValid] = useState({\n    username: false,\n    avatar: false,\n  });\n\n  useEffect(() => {\n    // Change this part by checking if current\n    // username is valid\n    if (chatWidget.isUsernameValid(username)) {\n      setInputsValid((d) => {\n        return { ...d, username: true };\n      });\n    } else {\n      setInputsValid((d) => {\n        return { ...d, username: false };\n      });\n    }\n  }, [username]);\n\n  return (\n    <>\n      <WelcomeContainer>\n        <Text size=\"small\" weight=\"bold\">\n          choose a username and avatar.\n        </Text>\n        <Separator spacing=\"sp+1\" />\n        <TextInput\n          placeholder=\"your username\"\n          value={username}\n          onChange={(event) => {\n            setUsername(event.target.value);\n          }}\n          onSubmit={(val) => {}}\n          action={\n            inputsValid.username\n              ? {\n                  icon: \"check-circle\",\n                  palette: \"green\",\n                }\n              : {\n                  icon: \"circle\",\n                  palette: \"white\",\n                }\n          }\n        />\n        <Separator spacing=\"sp+1\" />\n        <GridSelectImage\n          images={[\n            \"profiles/profiles-1.png\",\n            \"profiles/profiles-2.png\",\n            \"profiles/profiles-3.png\",\n            \"profiles/profiles-4.png\",\n            \"profiles/profiles-1.png\",\n            \"profiles/profiles-2.png\",\n            \"profiles/profiles-3.png\",\n            \"profiles/profiles-4.png\",\n          ]}\n          action={\n            inputsValid.avatar\n              ? {\n                  icon: \"check-circle\",\n                  palette: \"green\",\n                }\n              : {\n                  icon: \"circle\",\n                  palette: \"white\",\n                }\n          }\n          value={avatar}\n          onSelect={(url) => {\n            setAvatar(url);\n            setInputsValid((d) => {\n              return { ...d, avatar: true };\n            });\n          }}\n        />\n        <Separator spacing=\"sp+1\" />\n\n        <Button\n          style={{ width: \"100%\" }}\n          padding=\"sp+2\"\n          palette={\n            inputsValid.username && inputsValid.avatar ? \"purple\" : \"grey\"\n          }\n          hoverpalette={\n            inputsValid.username && inputsValid.avatar ? \"darkpurple\" : \"grey\"\n          }\n          activepalette={\n            inputsValid.username && inputsValid.avatar ? \"darkerpurple\" : \"grey\"\n          }\n          onClick={\n            inputsValid.username && inputsValid.avatar\n              ? (e) => {\n                  chatWidget.setAvatar(avatar);\n                  chatWidget.setUsername(username);\n                  chatWidget.setScreen(tokens.screens.chat);\n                }\n              : null\n          }\n        >\n          <Text size=\"small\" weight=\"bold\">\n            join\n          </Text>\n        </Button>\n      </WelcomeContainer>\n    </>\n  );\n};\n\nexport default Welcome;\n",["103","104"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Chat.js",["105","106","107","108","109"],"import React, { useRef, useEffect, useState, Fragment } from \"react\";\nimport { usePubNub } from \"pubnub-react\";\nimport {\n  TopBar,\n  BottomBar,\n  ChatContainer,\n  TextMessage,\n  Button,\n  Icon,\n  Text,\n  TextInput,\n  Separator,\n  Row,\n} from \"./styled\";\nimport tokens from \"./tokens\";\nimport { useChatWidget } from \"./index\";\n\nconst Chat = (props) => {\n  const chatWidget = useChatWidget();\n\n  const listRef = useRef(null);\n  const scrollToEnd = (el = listRef.current) => {\n    if (el) {\n      setTimeout(() => {\n        el.scrollTop = el.scrollHeight + 100;\n      }, 200);\n    }\n  };\n\n  useEffect(() => {\n    scrollToEnd();\n  }, []);\n\n  return (\n    <>\n      <Separator palette=\"darkgrey\" border=\"bo+1\" />\n      <ChatContainer ref={listRef}>\n        <Separator spacing=\"sp+2\" />\n        {chatWidget.messages.map((m, i) => {\n          let onlybody = false;\n          let noseparator = false;\n          if (i > 0) {\n            onlybody = chatWidget.messages[i - 1].sender.name === m.sender.name;\n          }\n          if (i < chatWidget.messages.length - 1) {\n            noseparator =\n              chatWidget.messages[i + 1].sender.name === m.sender.name;\n          }\n          return (\n            <Fragment key={`message-${i}`}>\n              <TextMessage message={m} onlybody={onlybody}></TextMessage>\n              {!noseparator && <Separator spacing=\"sp+2\" />}\n            </Fragment>\n          );\n        })}\n      </ChatContainer>\n      <Separator palette=\"darkgrey\" border=\"bo+1\" />\n\n      <BottomBar>\n        <TextInput\n          placeholder=\"type and enter\"\n          value={chatWidget.message}\n          onChange={(event) => {\n            chatWidget.setMessage(event.target.value);\n          }}\n          onSubmit={(val) => {\n            // publish message\n            chatWidget.sendMessage({\n              type: \"text\",\n              sender: {\n                name: chatWidget.username,\n                image: chatWidget.avatar,\n              },\n              text: val,\n              createdAt: new Date(),\n            });\n          }}\n          action={{\n            icon: \"donate\",\n            title: \"donate\",\n            palette: \"white\",\n            activepalette: \"grey\",\n            onClick: (e) => {\n              console.log(\"Donate!\");\n            },\n          }}\n        />\n        <Separator spacing=\"sp+1\" />\n        <Row>\n          <Text size=\"extrasmall\"> jlksjda made with &nbsp; </Text>\n          <Icon name=\"heart\" scale=\"sc-1\" />\n          <Text size=\"extrasmall\">&nbsp; by motelciler</Text>\n        </Row>\n        <Separator spacing=\"sp+1\" />\n      </BottomBar>\n    </>\n  );\n};\n\nexport default Chat;\n","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Settings.js",["110","111","112"],"import React, { useEffect, useState } from \"react\";\nimport {\n  TopBar,\n  WelcomeContainer,\n  TextInput,\n  GridSelectImage,\n  Button,\n  Icon,\n  Text,\n  Separator,\n} from \"./styled\";\nimport tokens from \"./tokens\";\n\nimport { useChatWidget } from \"./index\";\n\nconst Settings = (props) => {\n  const chatWidget = useChatWidget();\n  const [username, setUsername] = useState(chatWidget.username);\n  const [avatar, setAvatar] = useState(chatWidget.avatar);\n\n  const [inputsValid, setInputsValid] = useState({\n    username: chatWidget.isUsernameValid(username),\n    avatar: true,\n  });\n\n  useEffect(() => {\n    // Change this part by checking if current\n    // username is valid\n    if (chatWidget.isUsernameValid(username)) {\n      setInputsValid((d) => {\n        return { ...d, username: true };\n      });\n    } else {\n      setInputsValid((d) => {\n        return { ...d, username: false };\n      });\n    }\n  }, [username]);\n\n  return (\n    <>\n      <WelcomeContainer>\n        <Text size=\"small\" weight=\"bold\">\n          update a username and avatar.\n        </Text>\n        <Separator spacing=\"sp+1\" />\n        <TextInput\n          placeholder=\"your username\"\n          value={username}\n          onChange={(event) => {\n            setUsername(event.target.value);\n          }}\n          onSubmit={(val) => {}}\n          action={\n            inputsValid.username\n              ? {\n                  icon: \"check-circle\",\n                  palette: \"green\",\n                }\n              : {\n                  icon: \"circle\",\n                  palette: \"white\",\n                }\n          }\n        />\n        <Separator spacing=\"sp+1\" />\n        <GridSelectImage\n          images={[\n            \"profiles/profiles-1.png\",\n            \"profiles/profiles-2.png\",\n            \"profiles/profiles-3.png\",\n            \"profiles/profiles-4.png\",\n            \"profiles/profiles-1.png\",\n            \"profiles/profiles-2.png\",\n            \"profiles/profiles-3.png\",\n            \"profiles/profiles-4.png\",\n          ]}\n          action={\n            inputsValid.avatar\n              ? {\n                  icon: \"check-circle\",\n                  palette: \"green\",\n                }\n              : {\n                  icon: \"circle\",\n                  palette: \"white\",\n                }\n          }\n          value={avatar}\n          onSelect={(url) => {\n            setAvatar(url);\n            setInputsValid((d) => {\n              return { ...d, avatar: true };\n            });\n          }}\n        />\n        <Separator spacing=\"sp+1\" />\n\n        <Button\n          style={{ width: \"100%\" }}\n          padding=\"sp+2\"\n          palette={\n            inputsValid.username && inputsValid.avatar ? \"purple\" : \"grey\"\n          }\n          hoverpalette={\n            inputsValid.username && inputsValid.avatar ? \"darkpurple\" : \"grey\"\n          }\n          activepalette={\n            inputsValid.username && inputsValid.avatar ? \"darkerpurple\" : \"grey\"\n          }\n          onClick={\n            inputsValid.username && inputsValid.avatar\n              ? (e) => {\n                  chatWidget.setAvatar(avatar);\n                  chatWidget.setUsername(username);\n                  chatWidget.setScreen(tokens.screens.chat);\n                }\n              : null\n          }\n        >\n          <Text size=\"small\" weight=\"bold\">\n            save and return\n          </Text>\n        </Button>\n      </WelcomeContainer>\n    </>\n  );\n};\n\nexport default Settings;\n","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/config.js",["113"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/Config.js",["114"],{"ruleId":"115","severity":1,"message":"116","line":2,"column":8,"nodeType":"117","messageId":"118","endLine":2,"endColumn":12},{"ruleId":"119","severity":1,"message":"120","line":18,"column":1,"nodeType":"121","endLine":25,"endColumn":3},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"119","severity":1,"message":"120","line":28,"column":1,"nodeType":"121","endLine":41,"endColumn":3},{"ruleId":"126","severity":1,"message":"127","line":35,"column":7,"nodeType":"128","endLine":35,"endColumn":173},{"ruleId":"126","severity":1,"message":"127","line":36,"column":7,"nodeType":"128","endLine":36,"endColumn":173},{"ruleId":"126","severity":1,"message":"127","line":37,"column":7,"nodeType":"128","endLine":37,"endColumn":173},{"ruleId":"126","severity":1,"message":"127","line":38,"column":7,"nodeType":"128","endLine":38,"endColumn":173},{"ruleId":"119","severity":1,"message":"129","line":11,"column":1,"nodeType":"121","endLine":21,"endColumn":3},{"ruleId":"115","severity":1,"message":"130","line":9,"column":8,"nodeType":"117","messageId":"118","endLine":9,"endColumn":10},{"ruleId":"122","replacedBy":"131"},{"ruleId":"124","replacedBy":"132"},{"ruleId":"115","severity":1,"message":"133","line":33,"column":20,"nodeType":"117","messageId":"118","endLine":33,"endColumn":31},{"ruleId":"134","severity":1,"message":"135","line":60,"column":33,"nodeType":"136","messageId":"137","endLine":60,"endColumn":35},{"ruleId":"115","severity":1,"message":"138","line":1,"column":17,"nodeType":"117","messageId":"118","endLine":1,"endColumn":23},{"ruleId":"115","severity":1,"message":"139","line":1,"column":35,"nodeType":"117","messageId":"118","endLine":1,"endColumn":44},{"ruleId":"115","severity":1,"message":"140","line":2,"column":23,"nodeType":"117","messageId":"118","endLine":2,"endColumn":32},{"ruleId":"141","severity":1,"message":"142","line":183,"column":5,"nodeType":"143","messageId":"144","endLine":183,"endColumn":42},{"ruleId":"115","severity":1,"message":"145","line":489,"column":7,"nodeType":"117","messageId":"118","endLine":489,"endColumn":19},{"ruleId":"134","severity":1,"message":"135","line":496,"column":39,"nodeType":"136","messageId":"137","endLine":496,"endColumn":41},{"ruleId":"134","severity":1,"message":"135","line":498,"column":30,"nodeType":"136","messageId":"137","endLine":498,"endColumn":32},{"ruleId":"115","severity":1,"message":"146","line":529,"column":11,"nodeType":"117","messageId":"118","endLine":529,"endColumn":17},{"ruleId":"115","severity":1,"message":"147","line":529,"column":19,"nodeType":"117","messageId":"118","endLine":529,"endColumn":23},{"ruleId":"115","severity":1,"message":"148","line":529,"column":25,"nodeType":"117","messageId":"118","endLine":529,"endColumn":30},{"ruleId":"115","severity":1,"message":"149","line":529,"column":32,"nodeType":"117","messageId":"118","endLine":529,"endColumn":40},{"ruleId":"119","severity":1,"message":"129","line":1,"column":1,"nodeType":"121","endLine":72,"endColumn":3},{"ruleId":"115","severity":1,"message":"150","line":1,"column":8,"nodeType":"117","messageId":"118","endLine":1,"endColumn":14},{"ruleId":"115","severity":1,"message":"138","line":1,"column":17,"nodeType":"117","messageId":"118","endLine":1,"endColumn":23},{"ruleId":"115","severity":1,"message":"151","line":3,"column":3,"nodeType":"117","messageId":"118","endLine":3,"endColumn":9},{"ruleId":"115","severity":1,"message":"152","line":7,"column":3,"nodeType":"117","messageId":"118","endLine":7,"endColumn":7},{"ruleId":"153","severity":1,"message":"154","line":37,"column":6,"nodeType":"155","endLine":37,"endColumn":16,"suggestions":"156"},{"ruleId":"122","replacedBy":"157"},{"ruleId":"124","replacedBy":"158"},{"ruleId":"115","severity":1,"message":"159","line":1,"column":36,"nodeType":"117","messageId":"118","endLine":1,"endColumn":44},{"ruleId":"115","severity":1,"message":"160","line":2,"column":10,"nodeType":"117","messageId":"118","endLine":2,"endColumn":19},{"ruleId":"115","severity":1,"message":"151","line":4,"column":3,"nodeType":"117","messageId":"118","endLine":4,"endColumn":9},{"ruleId":"115","severity":1,"message":"161","line":8,"column":3,"nodeType":"117","messageId":"118","endLine":8,"endColumn":9},{"ruleId":"115","severity":1,"message":"162","line":15,"column":8,"nodeType":"117","messageId":"118","endLine":15,"endColumn":14},{"ruleId":"115","severity":1,"message":"151","line":3,"column":3,"nodeType":"117","messageId":"118","endLine":3,"endColumn":9},{"ruleId":"115","severity":1,"message":"152","line":8,"column":3,"nodeType":"117","messageId":"118","endLine":8,"endColumn":7},{"ruleId":"153","severity":1,"message":"154","line":38,"column":6,"nodeType":"155","endLine":38,"endColumn":16,"suggestions":"163"},{"ruleId":"119","severity":1,"message":"129","line":1,"column":1,"nodeType":"121","endLine":8,"endColumn":3},{"ruleId":"119","severity":1,"message":"129","line":1,"column":1,"nodeType":"121","endLine":8,"endColumn":3},"no-unused-vars","'Demo' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-native-reassign",["164"],"no-negated-in-lhs",["165"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Assign object to a variable before exporting as module default","'tr' is defined but never used.",["164"],["165"],"'setChannels' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useRef' is defined but never used.","'useEffect' is defined but never used.","'keyframes' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'MessageImage' is assigned a value but never used.","'sender' is assigned a value but never used.","'text' is assigned a value but never used.","'image' is assigned a value but never used.","'onlybody' is assigned a value but never used.","'styled' is defined but never used.","'TopBar' is defined but never used.","'Icon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'chatWidget'. Either include it or remove the dependency array.","ArrayExpression",["166"],["164"],["165"],"'useState' is defined but never used.","'usePubNub' is defined but never used.","'Button' is defined but never used.","'tokens' is defined but never used.",["167"],"no-global-assign","no-unsafe-negation",{"desc":"168","fix":"169"},{"desc":"168","fix":"170"},"Update the dependencies array to be: [chatWidget, username]",{"range":"171","text":"172"},{"range":"173","text":"172"},[889,899],"[chatWidget, username]",[903,913]]