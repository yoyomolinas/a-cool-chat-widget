[{"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/tokens.js":"1","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/Config.js":"2","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/App.js":"3","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/index.js":"4","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/index.js":"5","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Chat.js":"6","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/styled/index.js":"7","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/utils/day/index.js":"8","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/icons/index.js":"9","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Welcome.js":"10","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Settings.js":"11","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/GlobalStyle.js":"12"},{"size":1382,"mtime":1610841159956,"results":"13","hashOfConfig":"14"},{"size":292,"mtime":1610839920579,"results":"15","hashOfConfig":"14"},{"size":874,"mtime":1610847517400,"results":"16","hashOfConfig":"14"},{"size":372,"mtime":1610839196155,"results":"17","hashOfConfig":"14"},{"size":6277,"mtime":1610851976422,"results":"18","hashOfConfig":"14"},{"size":3570,"mtime":1610852884285,"results":"19","hashOfConfig":"14"},{"size":13233,"mtime":1610852423346,"results":"20","hashOfConfig":"14"},{"size":4416,"mtime":1609829706749,"results":"21","hashOfConfig":"14"},{"size":728,"mtime":1610159801018,"results":"22","hashOfConfig":"14"},{"size":3795,"mtime":1610848484872,"results":"23","hashOfConfig":"14"},{"size":3821,"mtime":1610848739968,"results":"24","hashOfConfig":"14"},{"size":521,"mtime":1610209341661,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"16klvty",{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/tokens.js",["52"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/Config.js",["53"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/App.js",["54"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/index.js",[],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/index.js",["55","56"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Chat.js",["57"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/styled/index.js",["58","59","60","61","62","63","64","65","66","67"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/utils/day/index.js",["68"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/icons/index.js",["69"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Welcome.js",["70","71","72","73"],"import React, { useRef, useEffect, useState, Fragment } from \"react\";\nimport {\n  TopBar,\n  WelcomeContainer,\n  GridSelectImage,\n  Button,\n  Icon,\n  Text,\n  TextInput,\n  Separator,\n} from \"./styled\";\nimport tokens from \"./tokens\";\nimport { useChatWidget } from \"./index\";\n\nconst Welcome = (props) => {\n  const chatWidget = useChatWidget();\n  const [username, setUsername] = useState(chatWidget.username);\n  const [avatar, setAvatar] = useState(chatWidget.avatar);\n\n  const [inputsValid, setInputsValid] = useState({\n    username: false,\n    avatar: false,\n  });\n\n  useEffect(() => {\n    // Change this part by checking if current\n    // username is valid\n    if (chatWidget.isUsernameValid(username)) {\n      setInputsValid((d) => {\n        return { ...d, username: true };\n      });\n    } else {\n      setInputsValid((d) => {\n        return { ...d, username: false };\n      });\n    }\n  }, [username]);\n\n  return (\n    <>\n      <WelcomeContainer>\n        <Text size=\"small\" weight=\"bold\">\n          choose a username and avatar.\n        </Text>\n        <Separator spacing=\"sp+1\" />\n        <TextInput\n          placeholder=\"your username\"\n          value={username}\n          onChange={(event) => {\n            setUsername(event.target.value);\n          }}\n          onSubmit={(val) => {}}\n          action={\n            inputsValid.username\n              ? {\n                  icon: \"check-circle\",\n                  palette: \"green\",\n                }\n              : {\n                  icon: \"circle\",\n                  palette: \"white\",\n                }\n          }\n        />\n        <Separator spacing=\"sp+1\" />\n        <GridSelectImage\n          images={[\n            process.env.PUBLIC_URL + \"/profiles/profiles-1.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-2.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-3.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-4.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-1.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-2.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-3.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-4.png\",\n          ]}\n          action={\n            inputsValid.avatar\n              ? {\n                  icon: \"check-circle\",\n                  palette: \"green\",\n                }\n              : {\n                  icon: \"circle\",\n                  palette: \"white\",\n                }\n          }\n          value={avatar}\n          onSelect={(url) => {\n            setAvatar(url);\n            setInputsValid((d) => {\n              return { ...d, avatar: true };\n            });\n          }}\n        />\n        <Separator spacing=\"sp+1\" />\n\n        <Button\n          style={{ width: \"100%\" }}\n          padding=\"sp+2\"\n          palette={\n            inputsValid.username && inputsValid.avatar ? \"purple\" : \"grey\"\n          }\n          hoverpalette={\n            inputsValid.username && inputsValid.avatar ? \"darkpurple\" : \"grey\"\n          }\n          activepalette={\n            inputsValid.username && inputsValid.avatar ? \"darkerpurple\" : \"grey\"\n          }\n          onClick={\n            inputsValid.username && inputsValid.avatar\n              ? (e) => {\n                  chatWidget.setAvatar(avatar);\n                  chatWidget.setUsername(username);\n                  chatWidget.addSender({\n                    id: chatWidget.userId,\n                    name: username,\n                    avatar,\n                  });\n                  chatWidget.setScreen(tokens.screens.chat);\n                }\n              : null\n          }\n        >\n          <Text size=\"small\" weight=\"bold\">\n            join\n          </Text>\n        </Button>\n      </WelcomeContainer>\n    </>\n  );\n};\n\nexport default Welcome;\n","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Settings.js",["74","75","76"],"import React, { useEffect, useState } from \"react\";\nimport {\n  TopBar,\n  WelcomeContainer,\n  TextInput,\n  GridSelectImage,\n  Button,\n  Icon,\n  Text,\n  Separator,\n} from \"./styled\";\nimport tokens from \"./tokens\";\n\nimport { useChatWidget } from \"./index\";\n\nconst Settings = (props) => {\n  const chatWidget = useChatWidget();\n  const [username, setUsername] = useState(chatWidget.username);\n  const [avatar, setAvatar] = useState(chatWidget.avatar);\n\n  const [inputsValid, setInputsValid] = useState({\n    username: chatWidget.isUsernameValid(username),\n    avatar: true,\n  });\n\n  useEffect(() => {\n    // Change this part by checking if current\n    // username is valid\n    if (chatWidget.isUsernameValid(username)) {\n      setInputsValid((d) => {\n        return { ...d, username: true };\n      });\n    } else {\n      setInputsValid((d) => {\n        return { ...d, username: false };\n      });\n    }\n  }, [username]);\n\n  return (\n    <>\n      <WelcomeContainer>\n        <Text size=\"small\" weight=\"bold\">\n          update a username and avatar.\n        </Text>\n        <Separator spacing=\"sp+1\" />\n        <TextInput\n          placeholder=\"your username\"\n          value={username}\n          onChange={(event) => {\n            setUsername(event.target.value);\n          }}\n          onSubmit={(val) => {}}\n          action={\n            inputsValid.username\n              ? {\n                  icon: \"check-circle\",\n                  palette: \"green\",\n                }\n              : {\n                  icon: \"circle\",\n                  palette: \"white\",\n                }\n          }\n        />\n        <Separator spacing=\"sp+1\" />\n        <GridSelectImage\n          images={[\n            process.env.PUBLIC_URL + \"/profiles/profiles-1.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-2.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-3.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-4.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-1.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-2.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-3.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-4.png\",\n          ]}\n          action={\n            inputsValid.avatar\n              ? {\n                  icon: \"check-circle\",\n                  palette: \"green\",\n                }\n              : {\n                  icon: \"circle\",\n                  palette: \"white\",\n                }\n          }\n          value={avatar}\n          onSelect={(url) => {\n            setAvatar(url);\n            setInputsValid((d) => {\n              return { ...d, avatar: true };\n            });\n          }}\n        />\n        <Separator spacing=\"sp+1\" />\n\n        <Button\n          style={{ width: \"100%\" }}\n          padding=\"sp+2\"\n          palette={\n            inputsValid.username && inputsValid.avatar ? \"purple\" : \"grey\"\n          }\n          hoverpalette={\n            inputsValid.username && inputsValid.avatar ? \"darkpurple\" : \"grey\"\n          }\n          activepalette={\n            inputsValid.username && inputsValid.avatar ? \"darkerpurple\" : \"grey\"\n          }\n          onClick={\n            inputsValid.username && inputsValid.avatar\n              ? (e) => {\n                  chatWidget.setAvatar(avatar);\n                  chatWidget.setUsername(username);\n                  chatWidget.setScreen(tokens.screens.chat);\n                  chatWidget.addSender({\n                    id: chatWidget.userId,\n                    name: username,\n                    avatar,\n                  });\n                }\n              : null\n          }\n        >\n          <Text size=\"small\" weight=\"bold\">\n            save and return\n          </Text>\n        </Button>\n      </WelcomeContainer>\n    </>\n  );\n};\n\nexport default Settings;\n","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/GlobalStyle.js",["77"],{"ruleId":"78","severity":1,"message":"79","line":1,"column":1,"nodeType":"80","endLine":74,"endColumn":3},{"ruleId":"78","severity":1,"message":"79","line":1,"column":1,"nodeType":"80","endLine":8,"endColumn":3},{"ruleId":"78","severity":1,"message":"81","line":19,"column":1,"nodeType":"80","endLine":41,"endColumn":3},{"ruleId":"82","severity":1,"message":"83","line":40,"column":20,"nodeType":"84","messageId":"85","endLine":40,"endColumn":31},{"ruleId":"86","severity":1,"message":"87","line":116,"column":6,"nodeType":"88","endLine":116,"endColumn":24,"suggestions":"89"},{"ruleId":"82","severity":1,"message":"90","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":25},{"ruleId":"82","severity":1,"message":"91","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":23},{"ruleId":"82","severity":1,"message":"92","line":1,"column":35,"nodeType":"84","messageId":"85","endLine":1,"endColumn":44},{"ruleId":"93","severity":1,"message":"94","line":222,"column":5,"nodeType":"95","messageId":"96","endLine":222,"endColumn":42},{"ruleId":"82","severity":1,"message":"97","line":535,"column":7,"nodeType":"84","messageId":"85","endLine":535,"endColumn":19},{"ruleId":"98","severity":1,"message":"99","line":542,"column":39,"nodeType":"100","messageId":"101","endLine":542,"endColumn":41},{"ruleId":"98","severity":1,"message":"99","line":544,"column":30,"nodeType":"100","messageId":"101","endLine":544,"endColumn":32},{"ruleId":"82","severity":1,"message":"102","line":575,"column":11,"nodeType":"84","messageId":"85","endLine":575,"endColumn":17},{"ruleId":"82","severity":1,"message":"103","line":575,"column":19,"nodeType":"84","messageId":"85","endLine":575,"endColumn":23},{"ruleId":"82","severity":1,"message":"104","line":575,"column":25,"nodeType":"84","messageId":"85","endLine":575,"endColumn":30},{"ruleId":"82","severity":1,"message":"105","line":575,"column":32,"nodeType":"84","messageId":"85","endLine":575,"endColumn":40},{"ruleId":"82","severity":1,"message":"106","line":9,"column":8,"nodeType":"84","messageId":"85","endLine":9,"endColumn":10},{"ruleId":"78","severity":1,"message":"79","line":11,"column":1,"nodeType":"80","endLine":21,"endColumn":3},{"ruleId":"82","severity":1,"message":"91","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":23},{"ruleId":"82","severity":1,"message":"107","line":3,"column":3,"nodeType":"84","messageId":"85","endLine":3,"endColumn":9},{"ruleId":"82","severity":1,"message":"108","line":7,"column":3,"nodeType":"84","messageId":"85","endLine":7,"endColumn":7},{"ruleId":"86","severity":1,"message":"109","line":37,"column":6,"nodeType":"88","endLine":37,"endColumn":16,"suggestions":"110"},{"ruleId":"82","severity":1,"message":"107","line":3,"column":3,"nodeType":"84","messageId":"85","endLine":3,"endColumn":9},{"ruleId":"82","severity":1,"message":"108","line":8,"column":3,"nodeType":"84","messageId":"85","endLine":8,"endColumn":7},{"ruleId":"86","severity":1,"message":"109","line":38,"column":6,"nodeType":"88","endLine":38,"endColumn":16,"suggestions":"111"},{"ruleId":"82","severity":1,"message":"112","line":1,"column":8,"nodeType":"84","messageId":"85","endLine":1,"endColumn":14},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","Assign arrow function to a variable before exporting as module default","no-unused-vars","'setChannels' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'channel', 'handleMessage', and 'handleSignal'. Either include them or remove the dependency array.","ArrayExpression",["113"],"'useState' is defined but never used.","'useRef' is defined but never used.","'useEffect' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'MessageImage' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'sender' is assigned a value but never used.","'text' is assigned a value but never used.","'image' is assigned a value but never used.","'onlybody' is assigned a value but never used.","'tr' is defined but never used.","'TopBar' is defined but never used.","'Icon' is defined but never used.","React Hook useEffect has a missing dependency: 'chatWidget'. Either include it or remove the dependency array.",["114"],["115"],"'styled' is defined but never used.",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"118","fix":"120"},"Update the dependencies array to be: [pubnub, channels, handleMessage, handleSignal, channel]",{"range":"121","text":"122"},"Update the dependencies array to be: [chatWidget, username]",{"range":"123","text":"124"},{"range":"125","text":"124"},[3143,3161],"[pubnub, channels, handleMessage, handleSignal, channel]",[889,899],"[chatWidget, username]",[903,913]]