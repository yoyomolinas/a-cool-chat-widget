[{"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/App.js":"1","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/index.js":"2","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/Demo.js":"3","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/icons/index.js":"4","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/utils/day/index.js":"5","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/index.js":"6","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/styled/index.js":"7","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/tokens.js":"8","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/GlobalStyle.js":"9","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Welcome.js":"10","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Chat.js":"11","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Settings.js":"12","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/config.js":"13","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/Config.js":"14"},{"size":603,"mtime":1610209244543,"results":"15","hashOfConfig":"16"},{"size":350,"mtime":1610205331835,"results":"17","hashOfConfig":"16"},{"size":1417,"mtime":1609798999105,"results":"18","hashOfConfig":"16"},{"size":728,"mtime":1610159801018,"results":"19","hashOfConfig":"16"},{"size":4416,"mtime":1609829706749,"results":"20","hashOfConfig":"16"},{"size":4517,"mtime":1610205234885,"results":"21","hashOfConfig":"16"},{"size":12533,"mtime":1610210298211,"results":"22","hashOfConfig":"16"},{"size":1340,"mtime":1610209344167,"results":"23","hashOfConfig":"16"},{"size":521,"mtime":1610209341661,"results":"24","hashOfConfig":"16"},{"size":3417,"mtime":1610204751275,"results":"25","hashOfConfig":"16"},{"size":2604,"mtime":1610204708211,"results":"26","hashOfConfig":"16"},{"size":3443,"mtime":1610204752514,"results":"27","hashOfConfig":"16"},{"size":264,"mtime":1610205243972,"results":"28","hashOfConfig":"16"},{"size":262,"mtime":1610206013309,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"16klvty",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/App.js",["68","69"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/index.js",[],["70","71"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/Demo.js",["72","73","74","75","76"],"import styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-flow: column wrap;\n  align-items: center;\n  // border: 2px solid red; // debug\n`;\n\nconst Title = styled.h1`\n  // bold text with inter font\n  font-family: Inter;\n  font-weight: 600;\n`;\nconst Text = styled.p`\n  // bold text with inter font\n  font-family: Inter;\n  font-weight: 400;\n`;\n\nconst Separator = styled.div`\n  width: 100%;\n  padding: 10px;\n  box-sizing: border-box;\n  // border: 2px solid red; // debug\n`;\n\nexport default () => {\n  return (\n    <Container>\n      <Title>Example Website</Title>\n      <Text>Hello world. This my example chat widget app.</Text>\n      <Separator />\n      <Separator />\n      <img src=\"https://lh3.googleusercontent.com/proxy/D4HxYx7UDOzSogrTPB1DWvHtUfQYqD8ZbStMwWcY4a94hDxzc8_Fkmj7BqQRi61J_hjE8zNMoyODa4XCf6s8BmXCwyo1aob7uW-0qZ2xrn5l1kre\" />\n      <img src=\"https://lh3.googleusercontent.com/proxy/D4HxYx7UDOzSogrTPB1DWvHtUfQYqD8ZbStMwWcY4a94hDxzc8_Fkmj7BqQRi61J_hjE8zNMoyODa4XCf6s8BmXCwyo1aob7uW-0qZ2xrn5l1kre\" />\n      <img src=\"https://lh3.googleusercontent.com/proxy/D4HxYx7UDOzSogrTPB1DWvHtUfQYqD8ZbStMwWcY4a94hDxzc8_Fkmj7BqQRi61J_hjE8zNMoyODa4XCf6s8BmXCwyo1aob7uW-0qZ2xrn5l1kre\" />\n      <img src=\"https://lh3.googleusercontent.com/proxy/D4HxYx7UDOzSogrTPB1DWvHtUfQYqD8ZbStMwWcY4a94hDxzc8_Fkmj7BqQRi61J_hjE8zNMoyODa4XCf6s8BmXCwyo1aob7uW-0qZ2xrn5l1kre\" />\n    </Container>\n  );\n};\n","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/icons/index.js",["77"],"import { ReactComponent as ArrowLeft } from \"./arrow-left.svg\";\nimport { ReactComponent as Multiply } from \"./multiply.svg\";\nimport { ReactComponent as Gear } from \"./gear.svg\";\nimport { ReactComponent as Heart } from \"./heart-alt.svg\";\nimport { ReactComponent as Runner } from \"./runner.svg\";\nimport { ReactComponent as Donate } from \"./donate.svg\";\nimport { ReactComponent as Circle } from \"./circle.svg\";\nimport { ReactComponent as Chat } from \"./chat.svg\";\nimport { ReactComponent as CheckCircle } from \"./check-circle.svg\";\n\nexport default {\n  \"arrow-left\": ArrowLeft,\n  multiply: Multiply,\n  gear: Gear,\n  heart: Heart,\n  runner: Runner,\n  donate: Donate,\n  circle: Circle,\n  \"check-circle\": CheckCircle,\n  chat: Chat,\n};\n","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/utils/day/index.js",["78"],"import { isObject } from \"@doubco/wtf\";\nimport dayjs from \"dayjs\";\nimport localizedFormat from \"dayjs/plugin/localizedFormat\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\nimport customParseFormat from \"dayjs/plugin/customParseFormat\";\nimport isBetween from \"dayjs/plugin/isBetween\";\n\nimport en_gb from \"dayjs/locale/en-gb\";\nimport tr from \"dayjs/locale/tr\";\n\ndayjs.extend(customParseFormat);\ndayjs.extend(localizedFormat);\ndayjs.extend(relativeTime);\ndayjs.extend(isBetween);\nclass Day {\n  constructor(props) {\n    const en = dayjs.en;\n\n    this.instance = dayjs;\n\n    // console.log(\"this.localeData\", this.localeData);\n    this.localeDatas = {\n      en,\n      en_gb,\n    };\n    this.localeData = this.localeDatas.en;\n  }\n\n  getCurrentLocale() {\n    return this.localeData.name;\n  }\n\n  day(...args) {\n    return this.instance(...args).locale(this.getCurrentLocale());\n  }\n\n  format(date, f, options = {}) {\n    let format = f;\n\n    if (format) {\n      Object.keys(this.localeData.formats).forEach((k) => {\n        format = format.replace(new RegExp(k), this.localeData.formats[k]);\n      });\n    }\n\n    return this.day(date).format(format);\n  }\n\n  formatDistance(date, from, options = { isRaw: false }) {\n    return this.day(date).from(from, options.isRaw);\n  }\n\n  toDate(date, options = {}) {\n    let opts = { ...options };\n\n    if (opts.format) {\n      Object.keys(this.localeData.formats).forEach((k) => {\n        opts.format = opts.format.replace(\n          new RegExp(k),\n          this.localeData.formats[k]\n        );\n      });\n    }\n    // console.log(\"toDate\", this.day(date, opts).toDate());\n    return this.day(date, opts).toDate();\n  }\n\n  toJSON(date, options = {}) {\n    return this.day(date, options).toJSON();\n  }\n\n  isValid(date, options = {}) {\n    return this.day(date, options).isValid();\n  }\n\n  date(date, options = {}) {\n    return this.day(date).date();\n  }\n\n  diff(date, compared, unit, options = {}) {\n    return this.day(date).diff(compared, unit, options.float);\n  }\n\n  weekday(date, options = {}) {\n    return this.day(date).day();\n  }\n\n  month(date, options = {}) {\n    return this.day(date).month();\n  }\n\n  year(date, options = {}) {\n    return this.day(date).year();\n  }\n\n  hour(date, options = {}) {\n    return this.day(date).hour();\n  }\n\n  minute(date, options = {}) {\n    return this.day(date).minute();\n  }\n\n  daysInMonth(date, options = {}) {\n    return this.day(date).daysInMonth();\n  }\n\n  set(unit, date, value, options = {}) {\n    return this.day(date).set(unit, value);\n  }\n\n  add(unit, date, value, options = {}) {\n    return this.day(date).add(value, unit);\n  }\n\n  subtract(unit, date, value, options = {}) {\n    return this.day(date).subtract(value, unit);\n  }\n\n  isBetween(date, start, end, options = { type: null }) {\n    return this.day(date).isBetween(start, end, options.type);\n  }\n\n  getFormat(format, options = {}) {\n    return this.localeData.formats[format];\n  }\n\n  getLocaleData(locale = this.getCurrentLocale(), options = {}) {\n    return this.localeDatas[locale];\n  }\n\n  getWeekdays(i) {\n    return this.localeData.weekdays[i] || \"\";\n  }\n\n  getWeekdaysShort(i) {\n    return this.localeData.weekdaysShort\n      ? this.localeData.weekdaysShort[i]\n      : this.getWeekdays(i).substr(0, 3);\n  }\n\n  getFormatAsArray() {\n    let data = this.localeData;\n    let date = [];\n    let time = [\"h\", \"m\"];\n    let l = data.formats[\"L\"];\n    let lt = data.formats[\"LT\"];\n    l = l.toLowerCase().replace(/-/g, \".\").replace(/\\//g, \".\");\n    date = l.split(\".\").map((i) => i.substr(0, 1));\n\n    if (lt.includes(\"A\")) {\n      time.push(\"a\");\n    }\n\n    return {\n      date,\n      time,\n    };\n  }\n\n  createContext(locale) {\n    return this.localeDatas[locale];\n  }\n\n  registerContext(context) {\n    if (context) {\n      this.localeData = context;\n      this.localeDatas[context.name] = context;\n      this.instance.locale(context);\n    }\n  }\n\n  locale(locale, callback) {\n    if (isObject(locale)) {\n      this.localeData = locale;\n      this.localeDatas[locale.name] = locale;\n      this.instance.locale(locale);\n      if (callback) callback();\n    } else {\n      if (this.localeDatas[locale]) {\n        this.localeData = this.localeDatas[locale];\n        if (callback) callback();\n      } else {\n        this.localeDatas[locale] = this.localeData;\n        this.instance.locale(locale);\n        if (callback) callback();\n      }\n    }\n  }\n}\n\nexport default new Day();\n",["79","80"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/index.js",["81","82"],"import React, {\n  useRef,\n  useEffect,\n  useState,\n  createContext,\n  useContext,\n} from \"react\";\nimport {\n  Container,\n  CollapsedChatContainer,\n  TopBar,\n  Button,\n  Icon,\n  Text,\n} from \"./styled\";\nimport Settings from \"./Settings\";\nimport Chat from \"./Chat\";\nimport Welcome from \"./Welcome\";\nimport { usePubNub } from \"pubnub-react\";\nimport tokens from \"./tokens\";\n\nconst Context = createContext();\n\nexport const ChatWidget = (props) => {\n  const { channel = \"awesome-channel\", icon = \"chat\" } = props;\n  const [collapsed, setCollapsed] = useState(true);\n  const [screen, setScreen] = useState(tokens.screens.welcome);\n  const [username, setUsername] = useState(\"\");\n  const [avatar, setAvatar] = useState(\"\");\n\n  // pubnub\n  const pubnub = usePubNub();\n  const [channels, setChannels] = useState([channel]);\n  const [messages, addMessage] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const handleMessage = (event) => {\n    const msg = event.message;\n    addMessage((messages) => [...messages, msg]);\n  };\n  useEffect(() => {\n    pubnub.addListener({ message: handleMessage });\n    pubnub.subscribe({ channels });\n  }, [pubnub, channels]);\n\n  const sendMessage = (msg) => {\n    if (msg) {\n      pubnub.publish({ channel: channels[0], message: msg }).then(() => {\n        setMessage(\"\");\n        scrollToEnd();\n      });\n    }\n  };\n  // pubnub\n\n  const isUsernameValid = (name) => {\n    const i = messages.findIndex((m) => {\n      return m.sender.name === name;\n    });\n\n    return name !== \"\" && (name == username || i === -1);\n  };\n\n  const listRef = useRef(null);\n  const scrollToEnd = (el = listRef.current) => {\n    if (el) {\n      setTimeout(() => {\n        el.scrollTop = el.scrollHeight + 100;\n      }, 200);\n    }\n  };\n\n  useEffect(() => {\n    scrollToEnd();\n  }, []);\n\n  return (\n    <Context.Provider\n      value={{\n        username,\n        setUsername,\n        avatar,\n        setAvatar,\n        screen,\n        setScreen,\n        collapsed,\n        setCollapsed,\n        message,\n        setMessage,\n        messages,\n        sendMessage,\n        isUsernameValid,\n      }}\n    >\n      {!collapsed && (\n        <Container palette=\"dark\">\n          <TopBar>\n            <Button\n              title=\"get the hell outta here!\"\n              palette=\"none\"\n              hoverpalette=\"darkgrey\"\n              activepalette=\"grey\"\n              onClick={(e) => {\n                setCollapsed(true);\n              }}\n            >\n              <Icon name=\"runner\" palette=\"white\" />\n            </Button>\n            <Text size=\"small\" weight=\"bold\">\n              welcome!\n            </Text>\n            <Button\n              title=\"preferences\"\n              palette=\"none\"\n              hoverpalette=\"darkgrey\"\n              activepalette=\"grey\"\n              clear={screen === tokens.screens.welcome}\n              onClick={\n                screen !== tokens.screens.welcome\n                  ? (e) => {\n                      setScreen(tokens.screens.settings);\n                    }\n                  : null\n              }\n            >\n              {screen !== tokens.screens.welcome && (\n                <Icon name=\"gear\" palette=\"white\" />\n              )}\n            </Button>\n          </TopBar>\n\n          {screen === tokens.screens.chat && (\n            <Chat\n              username={username}\n              avatar={avatar}\n              setScreen={setScreen}\n              setCollapsed={setCollapsed}\n            />\n          )}\n          {screen === tokens.screens.welcome && (\n            <Welcome\n              setUsername={setUsername}\n              setAvatar={setAvatar}\n              setScreen={setScreen}\n              setCollapsed={setCollapsed}\n            />\n          )}\n          {screen === tokens.screens.settings && (\n            <Settings\n              username={username}\n              avatar={avatar}\n              setUsername={setUsername}\n              setAvatar={setAvatar}\n              setScreen={setScreen}\n              setCollapsed={setCollapsed}\n            />\n          )}\n        </Container>\n      )}\n      {collapsed && (\n        <CollapsedChatContainer>\n          <Button\n            clear\n            onClick={(e) => {\n              setCollapsed(false);\n            }}\n          >\n            <Icon name={icon} scale=\"sc+2\" palette=\"black\" />\n          </Button>\n        </CollapsedChatContainer>\n      )}\n    </Context.Provider>\n  );\n};\n\nexport const useChatWidget = () => {\n  return useContext(Context);\n};\n\nexport default ChatWidget;\n","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/styled/index.js",["83","84","85","86","87","88","89","90","91","92","93"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/tokens.js",["94"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/GlobalStyle.js",["95"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Welcome.js",["96","97","98","99"],"import React, { useRef, useEffect, useState, Fragment } from \"react\";\nimport {\n  TopBar,\n  WelcomeContainer,\n  GridSelectImage,\n  Button,\n  Icon,\n  Text,\n  TextInput,\n  Separator,\n} from \"./styled\";\nimport tokens from \"./tokens\";\nimport { useChatWidget } from \"./index\";\n\nconst Welcome = (props) => {\n  const chatWidget = useChatWidget();\n  const [username, setUsername] = useState(chatWidget.username);\n  const [avatar, setAvatar] = useState(chatWidget.avatar);\n\n  const [inputsValid, setInputsValid] = useState({\n    username: false,\n    avatar: false,\n  });\n\n  useEffect(() => {\n    // Change this part by checking if current\n    // username is valid\n    if (chatWidget.isUsernameValid(username)) {\n      setInputsValid((d) => {\n        return { ...d, username: true };\n      });\n    } else {\n      setInputsValid((d) => {\n        return { ...d, username: false };\n      });\n    }\n  }, [username]);\n\n  return (\n    <>\n      <WelcomeContainer>\n        <Text size=\"small\" weight=\"bold\">\n          choose a username and avatar.\n        </Text>\n        <Separator spacing=\"sp+1\" />\n        <TextInput\n          placeholder=\"your username\"\n          value={username}\n          onChange={(event) => {\n            setUsername(event.target.value);\n          }}\n          onSubmit={(val) => {}}\n          action={\n            inputsValid.username\n              ? {\n                  icon: \"check-circle\",\n                  palette: \"green\",\n                }\n              : {\n                  icon: \"circle\",\n                  palette: \"white\",\n                }\n          }\n        />\n        <Separator spacing=\"sp+1\" />\n        <GridSelectImage\n          images={[\n            \"profiles/profiles-1.png\",\n            \"profiles/profiles-2.png\",\n            \"profiles/profiles-3.png\",\n            \"profiles/profiles-4.png\",\n            \"profiles/profiles-1.png\",\n            \"profiles/profiles-2.png\",\n            \"profiles/profiles-3.png\",\n            \"profiles/profiles-4.png\",\n          ]}\n          action={\n            inputsValid.avatar\n              ? {\n                  icon: \"check-circle\",\n                  palette: \"green\",\n                }\n              : {\n                  icon: \"circle\",\n                  palette: \"white\",\n                }\n          }\n          value={avatar}\n          onSelect={(url) => {\n            setAvatar(url);\n            setInputsValid((d) => {\n              return { ...d, avatar: true };\n            });\n          }}\n        />\n        <Separator spacing=\"sp+1\" />\n\n        <Button\n          style={{ width: \"100%\" }}\n          padding=\"sp+2\"\n          palette={\n            inputsValid.username && inputsValid.avatar ? \"purple\" : \"grey\"\n          }\n          hoverpalette={\n            inputsValid.username && inputsValid.avatar ? \"darkpurple\" : \"grey\"\n          }\n          activepalette={\n            inputsValid.username && inputsValid.avatar ? \"darkerpurple\" : \"grey\"\n          }\n          onClick={\n            inputsValid.username && inputsValid.avatar\n              ? (e) => {\n                  chatWidget.setAvatar(avatar);\n                  chatWidget.setUsername(username);\n                  chatWidget.setScreen(tokens.screens.chat);\n                }\n              : null\n          }\n        >\n          <Text size=\"small\" weight=\"bold\">\n            join\n          </Text>\n        </Button>\n      </WelcomeContainer>\n    </>\n  );\n};\n\nexport default Welcome;\n",["100","101"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Chat.js",["102","103","104","105","106"],"import React, { useRef, useEffect, useState, Fragment } from \"react\";\nimport { usePubNub } from \"pubnub-react\";\nimport {\n  TopBar,\n  BottomBar,\n  ChatContainer,\n  TextMessage,\n  Button,\n  Icon,\n  Text,\n  TextInput,\n  Separator,\n  Row,\n} from \"./styled\";\nimport tokens from \"./tokens\";\nimport { useChatWidget } from \"./index\";\n\nconst Chat = (props) => {\n  const chatWidget = useChatWidget();\n\n  const listRef = useRef(null);\n  const scrollToEnd = (el = listRef.current) => {\n    if (el) {\n      setTimeout(() => {\n        el.scrollTop = el.scrollHeight + 100;\n      }, 200);\n    }\n  };\n\n  useEffect(() => {\n    scrollToEnd();\n  }, []);\n\n  return (\n    <>\n      <Separator palette=\"darkgrey\" border=\"bo+1\" />\n      <ChatContainer ref={listRef}>\n        <Separator spacing=\"sp+2\" />\n        {chatWidget.messages.map((m, i) => {\n          let onlybody = false;\n          let noseparator = false;\n          if (i > 0) {\n            onlybody = chatWidget.messages[i - 1].sender.name === m.sender.name;\n          }\n          if (i < chatWidget.messages.length - 1) {\n            noseparator =\n              chatWidget.messages[i + 1].sender.name === m.sender.name;\n          }\n          return (\n            <Fragment key={`message-${i}`}>\n              <TextMessage message={m} onlybody={onlybody}></TextMessage>\n              {!noseparator && <Separator spacing=\"sp+2\" />}\n            </Fragment>\n          );\n        })}\n      </ChatContainer>\n      <Separator palette=\"darkgrey\" border=\"bo+1\" />\n\n      <BottomBar>\n        <TextInput\n          placeholder=\"type and enter\"\n          value={chatWidget.message}\n          onChange={(event) => {\n            chatWidget.setMessage(event.target.value);\n          }}\n          onSubmit={(val) => {\n            // publish message\n            chatWidget.sendMessage({\n              type: \"text\",\n              sender: {\n                name: chatWidget.username,\n                image: chatWidget.avatar,\n              },\n              text: val,\n              createdAt: new Date(),\n            });\n          }}\n          action={{\n            icon: \"donate\",\n            title: \"donate\",\n            palette: \"white\",\n            activepalette: \"grey\",\n            onClick: (e) => {\n              console.log(\"Donate!\");\n            },\n          }}\n        />\n        <Separator style={{ padding: \"4px\" }} />\n        <Row>\n          <Text size=\"extrasmall\">made with &nbsp; </Text>\n\n          <Icon name=\"heart\" scale=\"sc-1\" />\n\n          <Text size=\"extrasmall\">&nbsp; by motelciler</Text>\n        </Row>\n      </BottomBar>\n    </>\n  );\n};\n\nexport default Chat;\n","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Settings.js",["107","108","109"],"import React, { useEffect, useState } from \"react\";\nimport {\n  TopBar,\n  WelcomeContainer,\n  TextInput,\n  GridSelectImage,\n  Button,\n  Icon,\n  Text,\n  Separator,\n} from \"./styled\";\nimport tokens from \"./tokens\";\n\nimport { useChatWidget } from \"./index\";\n\nconst Settings = (props) => {\n  const chatWidget = useChatWidget();\n  const [username, setUsername] = useState(chatWidget.username);\n  const [avatar, setAvatar] = useState(chatWidget.avatar);\n\n  const [inputsValid, setInputsValid] = useState({\n    username: chatWidget.isUsernameValid(username),\n    avatar: true,\n  });\n\n  useEffect(() => {\n    // Change this part by checking if current\n    // username is valid\n    if (chatWidget.isUsernameValid(username)) {\n      setInputsValid((d) => {\n        return { ...d, username: true };\n      });\n    } else {\n      setInputsValid((d) => {\n        return { ...d, username: false };\n      });\n    }\n  }, [username]);\n\n  return (\n    <>\n      <WelcomeContainer>\n        <Text size=\"small\" weight=\"bold\">\n          update a username and avatar.\n        </Text>\n        <Separator spacing=\"sp+1\" />\n        <TextInput\n          placeholder=\"your username\"\n          value={username}\n          onChange={(event) => {\n            setUsername(event.target.value);\n          }}\n          onSubmit={(val) => {}}\n          action={\n            inputsValid.username\n              ? {\n                  icon: \"check-circle\",\n                  palette: \"green\",\n                }\n              : {\n                  icon: \"circle\",\n                  palette: \"white\",\n                }\n          }\n        />\n        <Separator spacing=\"sp+1\" />\n        <GridSelectImage\n          images={[\n            \"profiles/profiles-1.png\",\n            \"profiles/profiles-2.png\",\n            \"profiles/profiles-3.png\",\n            \"profiles/profiles-4.png\",\n            \"profiles/profiles-1.png\",\n            \"profiles/profiles-2.png\",\n            \"profiles/profiles-3.png\",\n            \"profiles/profiles-4.png\",\n          ]}\n          action={\n            inputsValid.avatar\n              ? {\n                  icon: \"check-circle\",\n                  palette: \"green\",\n                }\n              : {\n                  icon: \"circle\",\n                  palette: \"white\",\n                }\n          }\n          value={avatar}\n          onSelect={(url) => {\n            setAvatar(url);\n            setInputsValid((d) => {\n              return { ...d, avatar: true };\n            });\n          }}\n        />\n        <Separator spacing=\"sp+1\" />\n\n        <Button\n          style={{ width: \"100%\" }}\n          padding=\"sp+2\"\n          palette={\n            inputsValid.username && inputsValid.avatar ? \"purple\" : \"grey\"\n          }\n          hoverpalette={\n            inputsValid.username && inputsValid.avatar ? \"darkpurple\" : \"grey\"\n          }\n          activepalette={\n            inputsValid.username && inputsValid.avatar ? \"darkerpurple\" : \"grey\"\n          }\n          onClick={\n            inputsValid.username && inputsValid.avatar\n              ? (e) => {\n                  chatWidget.setAvatar(avatar);\n                  chatWidget.setUsername(username);\n                  chatWidget.setScreen(tokens.screens.chat);\n                }\n              : null\n          }\n        >\n          <Text size=\"small\" weight=\"bold\">\n            save and return\n          </Text>\n        </Button>\n      </WelcomeContainer>\n    </>\n  );\n};\n\nexport default Settings;\n","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/config.js",["110"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/Config.js",["111"],{"ruleId":"112","severity":1,"message":"113","line":2,"column":8,"nodeType":"114","messageId":"115","endLine":2,"endColumn":12},{"ruleId":"116","severity":1,"message":"117","line":18,"column":1,"nodeType":"118","endLine":25,"endColumn":3},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"116","severity":1,"message":"117","line":28,"column":1,"nodeType":"118","endLine":41,"endColumn":3},{"ruleId":"123","severity":1,"message":"124","line":35,"column":7,"nodeType":"125","endLine":35,"endColumn":173},{"ruleId":"123","severity":1,"message":"124","line":36,"column":7,"nodeType":"125","endLine":36,"endColumn":173},{"ruleId":"123","severity":1,"message":"124","line":37,"column":7,"nodeType":"125","endLine":37,"endColumn":173},{"ruleId":"123","severity":1,"message":"124","line":38,"column":7,"nodeType":"125","endLine":38,"endColumn":173},{"ruleId":"116","severity":1,"message":"126","line":11,"column":1,"nodeType":"118","endLine":21,"endColumn":3},{"ruleId":"112","severity":1,"message":"127","line":9,"column":8,"nodeType":"114","messageId":"115","endLine":9,"endColumn":10},{"ruleId":"119","replacedBy":"128"},{"ruleId":"121","replacedBy":"129"},{"ruleId":"112","severity":1,"message":"130","line":33,"column":20,"nodeType":"114","messageId":"115","endLine":33,"endColumn":31},{"ruleId":"131","severity":1,"message":"132","line":60,"column":33,"nodeType":"133","messageId":"134","endLine":60,"endColumn":35},{"ruleId":"112","severity":1,"message":"135","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":23},{"ruleId":"112","severity":1,"message":"136","line":1,"column":35,"nodeType":"114","messageId":"115","endLine":1,"endColumn":44},{"ruleId":"112","severity":1,"message":"137","line":2,"column":23,"nodeType":"114","messageId":"115","endLine":2,"endColumn":32},{"ruleId":"138","severity":1,"message":"139","line":182,"column":5,"nodeType":"140","messageId":"141","endLine":182,"endColumn":42},{"ruleId":"112","severity":1,"message":"142","line":488,"column":7,"nodeType":"114","messageId":"115","endLine":488,"endColumn":19},{"ruleId":"131","severity":1,"message":"132","line":495,"column":39,"nodeType":"133","messageId":"134","endLine":495,"endColumn":41},{"ruleId":"131","severity":1,"message":"132","line":497,"column":30,"nodeType":"133","messageId":"134","endLine":497,"endColumn":32},{"ruleId":"112","severity":1,"message":"143","line":528,"column":11,"nodeType":"114","messageId":"115","endLine":528,"endColumn":17},{"ruleId":"112","severity":1,"message":"144","line":528,"column":19,"nodeType":"114","messageId":"115","endLine":528,"endColumn":23},{"ruleId":"112","severity":1,"message":"145","line":528,"column":25,"nodeType":"114","messageId":"115","endLine":528,"endColumn":30},{"ruleId":"112","severity":1,"message":"146","line":528,"column":32,"nodeType":"114","messageId":"115","endLine":528,"endColumn":40},{"ruleId":"116","severity":1,"message":"126","line":1,"column":1,"nodeType":"118","endLine":72,"endColumn":3},{"ruleId":"112","severity":1,"message":"147","line":1,"column":8,"nodeType":"114","messageId":"115","endLine":1,"endColumn":14},{"ruleId":"112","severity":1,"message":"135","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":23},{"ruleId":"112","severity":1,"message":"148","line":3,"column":3,"nodeType":"114","messageId":"115","endLine":3,"endColumn":9},{"ruleId":"112","severity":1,"message":"149","line":7,"column":3,"nodeType":"114","messageId":"115","endLine":7,"endColumn":7},{"ruleId":"150","severity":1,"message":"151","line":37,"column":6,"nodeType":"152","endLine":37,"endColumn":16,"suggestions":"153"},{"ruleId":"119","replacedBy":"154"},{"ruleId":"121","replacedBy":"155"},{"ruleId":"112","severity":1,"message":"156","line":1,"column":36,"nodeType":"114","messageId":"115","endLine":1,"endColumn":44},{"ruleId":"112","severity":1,"message":"157","line":2,"column":10,"nodeType":"114","messageId":"115","endLine":2,"endColumn":19},{"ruleId":"112","severity":1,"message":"148","line":4,"column":3,"nodeType":"114","messageId":"115","endLine":4,"endColumn":9},{"ruleId":"112","severity":1,"message":"158","line":8,"column":3,"nodeType":"114","messageId":"115","endLine":8,"endColumn":9},{"ruleId":"112","severity":1,"message":"159","line":15,"column":8,"nodeType":"114","messageId":"115","endLine":15,"endColumn":14},{"ruleId":"112","severity":1,"message":"148","line":3,"column":3,"nodeType":"114","messageId":"115","endLine":3,"endColumn":9},{"ruleId":"112","severity":1,"message":"149","line":8,"column":3,"nodeType":"114","messageId":"115","endLine":8,"endColumn":7},{"ruleId":"150","severity":1,"message":"151","line":38,"column":6,"nodeType":"152","endLine":38,"endColumn":16,"suggestions":"160"},{"ruleId":"116","severity":1,"message":"126","line":1,"column":1,"nodeType":"118","endLine":8,"endColumn":3},{"ruleId":"116","severity":1,"message":"126","line":1,"column":1,"nodeType":"118","endLine":8,"endColumn":3},"no-unused-vars","'Demo' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-native-reassign",["161"],"no-negated-in-lhs",["162"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Assign object to a variable before exporting as module default","'tr' is defined but never used.",["161"],["162"],"'setChannels' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useRef' is defined but never used.","'useEffect' is defined but never used.","'keyframes' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'MessageImage' is assigned a value but never used.","'sender' is assigned a value but never used.","'text' is assigned a value but never used.","'image' is assigned a value but never used.","'onlybody' is assigned a value but never used.","'styled' is defined but never used.","'TopBar' is defined but never used.","'Icon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'chatWidget'. Either include it or remove the dependency array.","ArrayExpression",["163"],["161"],["162"],"'useState' is defined but never used.","'usePubNub' is defined but never used.","'Button' is defined but never used.","'tokens' is defined but never used.",["164"],"no-global-assign","no-unsafe-negation",{"desc":"165","fix":"166"},{"desc":"165","fix":"167"},"Update the dependencies array to be: [chatWidget, username]",{"range":"168","text":"169"},{"range":"170","text":"169"},[889,899],"[chatWidget, username]",[903,913]]