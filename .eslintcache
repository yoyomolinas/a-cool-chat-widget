[{"/Users/yoelmolinas/Projects/a-cool-chat-widget/src/index.js":"1","/Users/yoelmolinas/Projects/a-cool-chat-widget/src/icons/index.js":"2","/Users/yoelmolinas/Projects/a-cool-chat-widget/src/components/ChatWidget/styled/index.js":"3","/Users/yoelmolinas/Projects/a-cool-chat-widget/src/components/ChatWidget/Chat.js":"4","/Users/yoelmolinas/Projects/a-cool-chat-widget/src/components/ChatWidget/tokens.js":"5","/Users/yoelmolinas/Projects/a-cool-chat-widget/src/utils/day/index.js":"6","/Users/yoelmolinas/Projects/a-cool-chat-widget/src/GlobalStyle.js":"7","/Users/yoelmolinas/Projects/a-cool-chat-widget/src/components/ChatWidget/Welcome.js":"8","/Users/yoelmolinas/Projects/a-cool-chat-widget/src/components/ChatWidget/Settings.js":"9","/Users/yoelmolinas/Projects/a-cool-chat-widget/src/components/ChatWidget/index.js":"10"},{"size":372,"mtime":1614955444511,"results":"11","hashOfConfig":"12"},{"size":831,"mtime":1614955444510,"results":"13","hashOfConfig":"12"},{"size":13336,"mtime":1614960034858,"results":"14","hashOfConfig":"12"},{"size":4077,"mtime":1614960502255,"results":"15","hashOfConfig":"12"},{"size":1382,"mtime":1614955444508,"results":"16","hashOfConfig":"12"},{"size":4416,"mtime":1614955444511,"results":"17","hashOfConfig":"12"},{"size":518,"mtime":1614957025528,"results":"18","hashOfConfig":"12"},{"size":3625,"mtime":1614955444507,"results":"19","hashOfConfig":"12"},{"size":3651,"mtime":1614955444507,"results":"20","hashOfConfig":"12"},{"size":7842,"mtime":1614955444508,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"163ugv9",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},"/Users/yoelmolinas/Projects/a-cool-chat-widget/src/index.js",[],["45","46"],"/Users/yoelmolinas/Projects/a-cool-chat-widget/src/icons/index.js",["47"],"import { ReactComponent as ArrowLeft } from \"./arrow-left.svg\";\nimport { ReactComponent as Multiply } from \"./multiply.svg\";\nimport { ReactComponent as Gear } from \"./gear.svg\";\nimport { ReactComponent as Heart } from \"./heart-alt.svg\";\nimport { ReactComponent as Runner } from \"./runner.svg\";\nimport { ReactComponent as Donate } from \"./donate.svg\";\nimport { ReactComponent as Circle } from \"./circle.svg\";\nimport { ReactComponent as Chat } from \"./chat.svg\";\nimport { ReactComponent as ChatNotified } from \"./chat-notified.svg\";\nimport { ReactComponent as CheckCircle } from \"./check-circle.svg\";\n\nexport default {\n  \"arrow-left\": ArrowLeft,\n  multiply: Multiply,\n  gear: Gear,\n  heart: Heart,\n  runner: Runner,\n  donate: Donate,\n  circle: Circle,\n  \"check-circle\": CheckCircle,\n  chat: Chat,\n  \"chat-notified\": ChatNotified,\n};\n","/Users/yoelmolinas/Projects/a-cool-chat-widget/src/components/ChatWidget/styled/index.js",["48","49","50","51","52","53"],"/Users/yoelmolinas/Projects/a-cool-chat-widget/src/components/ChatWidget/Chat.js",["54","55","56"],"/Users/yoelmolinas/Projects/a-cool-chat-widget/src/components/ChatWidget/tokens.js",["57"],"/Users/yoelmolinas/Projects/a-cool-chat-widget/src/utils/day/index.js",["58"],"/Users/yoelmolinas/Projects/a-cool-chat-widget/src/GlobalStyle.js",["59"],"/Users/yoelmolinas/Projects/a-cool-chat-widget/src/components/ChatWidget/Welcome.js",["60","61","62","63"],"/Users/yoelmolinas/Projects/a-cool-chat-widget/src/components/ChatWidget/Settings.js",["64","65","66"],"/Users/yoelmolinas/Projects/a-cool-chat-widget/src/components/ChatWidget/index.js",["67","68","69","70"],"import React, {\n  useRef,\n  useEffect,\n  useState,\n  createContext,\n  useContext,\n} from \"react\";\n\nimport Cookie from \"js-cookie\";\n\nimport {\n  Container,\n  FadeIn,\n  CollapsedChatContainer,\n  TopBar,\n  Button,\n  Icon,\n  Text,\n} from \"./styled\";\nimport Settings from \"./Settings\";\nimport Chat from \"./Chat\";\nimport Welcome from \"./Welcome\";\nimport { usePubNub } from \"pubnub-react\";\nimport tokens from \"./tokens\";\n\nconst Context = createContext();\n\nexport const ChatWidget = (props) => {\n  const { userId, channel = \"test-123\", iconcolor = \"black\" } = props;\n\n  const [collapsed, setCollapsed] = useState(\n    Cookie.get(\"collapsed\") === \"false\" ? false : true\n  );\n  const [username, setUsername] = useState(Cookie.get(\"username\") || \"\"); // TODO remave\n  const [avatar, setAvatar] = useState(Cookie.get(\"avatar\") || \"\"); // TODO remave\n  const [screen, setScreen] = useState(\n    username === \"\" || avatar === \"\"\n      ? tokens.screens.welcome\n      : tokens.screens.chat\n  );\n\n  const [personTyping, setPersonTyping] = useState(null);\n\n  const whoIsTyping = useRef([]);\n  const whoIsHere = useRef([]);\n\n  // pubnub\n  const pubnub = usePubNub();\n  const [channels, setChannels] = useState([channel]);\n  const [messages, addMessage] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [notification, setNotification] = useState(false);\n  const [numOccupants, setNumOccupants] = useState(0);\n\n  const handleMessage = (event) => {\n    const msg = event.message;\n    addMessage((messages) => [...messages, msg]);\n    if (collapsed) setNotification(true);\n  };\n  const handleSignal = (event) => {\n    // return if typing user is unknown\n    if (!whoIsHere.current.map((o) => o.id).includes(event.publisher)) return;\n    const isTyping =\n      event.message === \"typing_on\"\n        ? true\n        : event.message === \"typing_off\"\n        ? false\n        : null;\n    const senderId = event.publisher;\n\n    // console.log(`is typing ${isTyping} ${senderId}`);\n    if (!isTyping) {\n      // console.log(\"NOT TYPING SIGNAL RECIEVED\");\n      const i = whoIsTyping.current.indexOf(senderId);\n      if (i > -1) {\n        whoIsTyping.current.splice(i, 1);\n      }\n    } else if (isTyping) {\n      const i = whoIsTyping.current.indexOf(senderId);\n      if (i === -1) whoIsTyping.current = [...whoIsTyping.current, senderId];\n    }\n\n    // Set person typing\n    if (whoIsTyping.current.length === 0) setPersonTyping(null);\n    else {\n      for (const id of whoIsTyping.current) {\n        if (userId !== id) {\n          const typer = whoIsHere.current.find((e) => e.id === id);\n          setPersonTyping(typer.username);\n          break;\n        }\n      }\n    }\n  };\n  const handlePresence = (event) => {\n    // lets get to know the people here.\n    pubnub\n      .hereNow({\n        channels: [channel],\n        includeUUIDs: true,\n        includeState: true,\n      })\n      .then((response) => {\n        setNumOccupants(response.channels[channel].occupants.length);\n        console.log(response.channels[channel].occupants.length);\n\n        whoIsHere.current = response.channels[channel].occupants\n          .map((o) => o.state)\n          .filter((o) => o !== undefined);\n      });\n  };\n  useEffect(() => {\n    // fetch messages\n    // start, end, count are optional\n\n    pubnub.fetchMessages(\n      {\n        channels,\n        end: 0,\n        count: 100,\n      },\n      (status, response) => {\n        if (!response) return;\n\n        const storedMessages = response.channels[channel].map((e) => e.message);\n        addMessage((messages) => [...storedMessages, ...messages]);\n      }\n    );\n\n    pubnub.addListener({ message: handleMessage });\n    pubnub.subscribe({ channels, withPresence: true });\n    pubnub.addListener({ presence: handlePresence });\n    handlePresence({}); // call once to initiate presence\n    pubnub.addListener({ signal: handleSignal });\n  }, [pubnub, channels]);\n\n  const sendMessage = ({ message = {}, callback = () => {} }) => {\n    if (message) {\n      pubnub.publish({ channel: channels[0], message }).then(() => {\n        sendTypingSignal(false);\n        setMessage(\"\");\n        callback();\n      });\n    }\n  };\n\n  const sendTypingSignal = (isTyping = true) => {\n    pubnub\n      .signal({\n        channel,\n        message: isTyping ? \"typing_on\" : \"typing_off\",\n      })\n      .then((response) => {});\n  };\n  // pubnub\n\n  const isUsernameValid = (name) => {\n    const i = whoIsHere.current.findIndex((occupant) => {\n      return occupant.name === name;\n    });\n    return name !== \"\" && (name === username || i === -1);\n  };\n\n  useEffect(() => {\n    setNotification(false);\n  }, [collapsed]);\n\n  useEffect(() => {\n    setNotification(true);\n  }, [messages]);\n\n  useEffect(() => {\n    // things to do when settings change\n    pubnub.setState({\n      state: { username, id: userId, image: avatar, collapsed },\n      channels: [channel],\n    });\n\n    // set cookie\n    Cookie.set(\"username\", username, { expires: 7 });\n    Cookie.set(\"avatar\", avatar, { expires: 7 });\n    Cookie.set(\"collapsed\", collapsed, { expires: 7 });\n  }, [username, avatar, userId, collapsed]);\n\n  return (\n    <Context.Provider\n      value={{\n        userId,\n        username,\n        setUsername,\n        avatar,\n        setAvatar,\n        screen,\n        setScreen,\n        collapsed,\n        setCollapsed,\n        message,\n        setMessage,\n        messages,\n        sendMessage,\n        isUsernameValid,\n        whoIsTyping,\n        personTyping,\n        sendTypingSignal,\n      }}\n    >\n      {!collapsed && (\n        <Container palette=\"dark\">\n          <TopBar>\n            <Button\n              title=\"get the hell outta here!\"\n              palette=\"none\"\n              hoverpalette=\"darkgrey\"\n              activepalette=\"grey\"\n              onClick={(e) => {\n                setCollapsed(true);\n              }}\n            >\n              <Icon name=\"runner\" palette=\"white\" />\n            </Button>\n\n            <FadeIn>\n              <Text size=\"small\" weight=\"bold\">\n                {numOccupants > 1\n                  ? `${numOccupants} people here!`\n                  : numOccupants == 1\n                  ? \"only you here!\"\n                  : \"welcome!\"}\n              </Text>\n            </FadeIn>\n            <Button\n              title=\"preferences\"\n              palette=\"none\"\n              hoverpalette=\"darkgrey\"\n              activepalette=\"grey\"\n              clear={screen === tokens.screens.welcome}\n              onClick={\n                screen !== tokens.screens.welcome\n                  ? (e) => {\n                      let nextScreen = tokens.screens.settings;\n                      if (screen === tokens.screens.settings)\n                        nextScreen = tokens.screens.chat;\n                      setScreen(nextScreen);\n                    }\n                  : null\n              }\n            >\n              {screen !== tokens.screens.welcome && (\n                <Icon name=\"gear\" palette=\"white\" />\n              )}\n            </Button>\n          </TopBar>\n\n          {screen === tokens.screens.chat && <Chat />}\n          {screen === tokens.screens.welcome && <Welcome />}\n          {screen === tokens.screens.settings && <Settings />}\n        </Container>\n      )}\n      {collapsed && (\n        <CollapsedChatContainer>\n          <Button\n            clear\n            onClick={(e) => {\n              setCollapsed(false);\n            }}\n          >\n            {!notification && (\n              <Icon name={\"chat\"} scale=\"sc+2\" palette={iconcolor} />\n            )}\n            {notification && (\n              <Icon name={\"chat-notified\"} scale=\"sc+2\" palette={iconcolor} />\n            )}\n          </Button>\n        </CollapsedChatContainer>\n      )}\n    </Context.Provider>\n  );\n};\n\nexport const useChatWidget = () => {\n  return useContext(Context);\n};\n\nexport default ChatWidget;\n",{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":12,"column":1,"nodeType":"77","endLine":23,"endColumn":3},{"ruleId":"78","severity":1,"message":"79","line":1,"column":17,"nodeType":"80","messageId":"81","endLine":1,"endColumn":23},{"ruleId":"78","severity":1,"message":"82","line":1,"column":35,"nodeType":"80","messageId":"81","endLine":1,"endColumn":44},{"ruleId":"83","severity":1,"message":"84","line":224,"column":5,"nodeType":"85","messageId":"86","endLine":224,"endColumn":42},{"ruleId":"78","severity":1,"message":"87","line":538,"column":7,"nodeType":"80","messageId":"81","endLine":538,"endColumn":19},{"ruleId":"88","severity":1,"message":"89","line":545,"column":39,"nodeType":"90","messageId":"91","endLine":545,"endColumn":41},{"ruleId":"88","severity":1,"message":"89","line":547,"column":30,"nodeType":"90","messageId":"91","endLine":547,"endColumn":32},{"ruleId":"78","severity":1,"message":"92","line":1,"column":17,"nodeType":"80","messageId":"81","endLine":1,"endColumn":25},{"ruleId":"78","severity":1,"message":"93","line":15,"column":3,"nodeType":"80","messageId":"81","endLine":15,"endColumn":18},{"ruleId":"78","severity":1,"message":"94","line":16,"column":3,"nodeType":"80","messageId":"81","endLine":16,"endColumn":25},{"ruleId":"75","severity":1,"message":"76","line":1,"column":1,"nodeType":"77","endLine":74,"endColumn":3},{"ruleId":"78","severity":1,"message":"95","line":9,"column":8,"nodeType":"80","messageId":"81","endLine":9,"endColumn":10},{"ruleId":"78","severity":1,"message":"96","line":1,"column":8,"nodeType":"80","messageId":"81","endLine":1,"endColumn":14},{"ruleId":"78","severity":1,"message":"79","line":1,"column":17,"nodeType":"80","messageId":"81","endLine":1,"endColumn":23},{"ruleId":"78","severity":1,"message":"97","line":3,"column":3,"nodeType":"80","messageId":"81","endLine":3,"endColumn":9},{"ruleId":"78","severity":1,"message":"98","line":7,"column":3,"nodeType":"80","messageId":"81","endLine":7,"endColumn":7},{"ruleId":"99","severity":1,"message":"100","line":37,"column":6,"nodeType":"101","endLine":37,"endColumn":16,"suggestions":"102"},{"ruleId":"78","severity":1,"message":"97","line":3,"column":3,"nodeType":"80","messageId":"81","endLine":3,"endColumn":9},{"ruleId":"78","severity":1,"message":"98","line":8,"column":3,"nodeType":"80","messageId":"81","endLine":8,"endColumn":7},{"ruleId":"99","severity":1,"message":"100","line":38,"column":6,"nodeType":"101","endLine":38,"endColumn":16,"suggestions":"103"},{"ruleId":"78","severity":1,"message":"104","line":49,"column":20,"nodeType":"80","messageId":"81","endLine":49,"endColumn":31},{"ruleId":"99","severity":1,"message":"105","line":135,"column":6,"nodeType":"101","endLine":135,"endColumn":24,"suggestions":"106"},{"ruleId":"99","severity":1,"message":"107","line":183,"column":6,"nodeType":"101","endLine":183,"endColumn":43,"suggestions":"108"},{"ruleId":"88","severity":1,"message":"89","line":226,"column":34,"nodeType":"90","messageId":"91","endLine":226,"endColumn":36},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'MessageImage' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'FloatingDateBox' is defined but never used.","'FloatingDateBoxWrapper' is defined but never used.","'tr' is defined but never used.","'styled' is defined but never used.","'TopBar' is defined but never used.","'Icon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'chatWidget'. Either include it or remove the dependency array.","ArrayExpression",["111"],["112"],"'setChannels' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'channel', 'handleMessage', 'handlePresence', and 'handleSignal'. Either include them or remove the dependency array.",["113"],"React Hook useEffect has missing dependencies: 'channel' and 'pubnub'. Either include them or remove the dependency array.",["114"],"no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},{"desc":"115","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},"Update the dependencies array to be: [chatWidget, username]",{"range":"122","text":"123"},{"range":"124","text":"123"},"Update the dependencies array to be: [pubnub, channels, handleMessage, handlePresence, handleSignal, channel]",{"range":"125","text":"126"},"Update the dependencies array to be: [username, avatar, userId, collapsed, pubnub, channel]",{"range":"127","text":"128"},[889,899],"[chatWidget, username]",[903,913],[3869,3887],"[pubnub, channels, handleMessage, handlePresence, handleSignal, channel]",[5060,5097],"[username, avatar, userId, collapsed, pubnub, channel]"]