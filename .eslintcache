[{"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/tokens.js":"1","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/Config.js":"2","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/App.js":"3","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/index.js":"4","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/index.js":"5","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Chat.js":"6","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/styled/index.js":"7","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/utils/day/index.js":"8","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/icons/index.js":"9","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Welcome.js":"10","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Settings.js":"11","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/GlobalStyle.js":"12"},{"size":1382,"mtime":1610841159956,"results":"13","hashOfConfig":"14"},{"size":292,"mtime":1610839920579,"results":"15","hashOfConfig":"14"},{"size":895,"mtime":1610912446942,"results":"16","hashOfConfig":"14"},{"size":372,"mtime":1610839196155,"results":"17","hashOfConfig":"14"},{"size":6413,"mtime":1610914521126,"results":"18","hashOfConfig":"14"},{"size":3681,"mtime":1610909860936,"results":"19","hashOfConfig":"14"},{"size":13233,"mtime":1610854083679,"results":"20","hashOfConfig":"14"},{"size":4416,"mtime":1609829706749,"results":"21","hashOfConfig":"14"},{"size":728,"mtime":1610159801018,"results":"22","hashOfConfig":"14"},{"size":3625,"mtime":1610913718513,"results":"23","hashOfConfig":"14"},{"size":3651,"mtime":1610913722574,"results":"24","hashOfConfig":"14"},{"size":518,"mtime":1610909557728,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"16klvty",{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/tokens.js",["54"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/Config.js",["55"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/App.js",["56"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/index.js",[],["57","58"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/index.js",["59","60","61"],"import React, {\n  useRef,\n  useEffect,\n  useState,\n  createContext,\n  useContext,\n} from \"react\";\nimport {\n  Container,\n  CollapsedChatContainer,\n  TopBar,\n  Button,\n  Icon,\n  Text,\n} from \"./styled\";\nimport Settings from \"./Settings\";\nimport Chat from \"./Chat\";\nimport Welcome from \"./Welcome\";\nimport { usePubNub } from \"pubnub-react\";\nimport tokens from \"./tokens\";\n\nconst Context = createContext();\n\nexport const ChatWidget = (props) => {\n  const {\n    userId,\n    channel = \"test-123\",\n    icon = \"chat\",\n    iconcolor = \"black\",\n  } = props;\n  const [collapsed, setCollapsed] = useState(false);\n  const [screen, setScreen] = useState(tokens.screens.chat); // TODO change to welcome\n  const [username, setUsername] = useState(\"test-123\"); // TODO remave\n  const [avatar, setAvatar] = useState(\"/profiles/profiles-1.png\"); // TODO remave\n  const [personTyping, setPersonTyping] = useState(null);\n\n  const whoIsTyping = useRef([]);\n  const whoIsHere = useRef([]);\n\n  // pubnub\n  const pubnub = usePubNub();\n  const [channels, setChannels] = useState([channel]);\n  const [messages, addMessage] = useState([]);\n  const [message, setMessage] = useState(\"\");\n\n  const handleMessage = (event) => {\n    const msg = event.message;\n    addMessage((messages) => [...messages, msg]);\n  };\n  const handleSignal = (event) => {\n    // return if typing user is unknown\n    if (!whoIsHere.current.map((o) => o.id).includes(event.publisher)) return;\n    const isTyping =\n      event.message === \"typing_on\"\n        ? true\n        : event.message === \"typing_off\"\n        ? false\n        : null;\n    const senderId = event.publisher;\n\n    // console.log(`is typing ${isTyping} ${senderId}`);\n    if (!isTyping) {\n      // console.log(\"NOT TYPING SIGNAL RECIEVED\");\n      const i = whoIsTyping.current.indexOf(senderId);\n      if (i > -1) {\n        whoIsTyping.current.splice(i, 1);\n      }\n    } else if (isTyping) {\n      const i = whoIsTyping.current.indexOf(senderId);\n      if (i === -1) whoIsTyping.current = [...whoIsTyping.current, senderId];\n    }\n\n    // Set person typing\n    if (whoIsTyping.current.length === 0) setPersonTyping(null);\n    else {\n      for (const id of whoIsTyping.current) {\n        if (userId !== id) {\n          const typer = whoIsHere.current.find((e) => e.id === id);\n          setPersonTyping(typer.username);\n          break;\n        }\n      }\n    }\n  };\n  const handlePresence = (event) => {\n    // lets get to know the people here.\n    pubnub\n      .hereNow({\n        channels: [channel],\n        includeUUIDs: true,\n        includeState: true,\n      })\n      .then((response) => {\n        whoIsHere.current = response.channels[channel].occupants\n          .map((o) => o.state)\n          .filter((o) => o !== undefined);\n      });\n  };\n  useEffect(() => {\n    // fetch messages\n    // start, end, count are optional\n\n    pubnub.fetchMessages(\n      {\n        channels,\n        end: 0,\n        count: 10,\n      },\n      (status, response) => {\n        if (!response) return;\n\n        const storedMessages = response.channels[channel].map((e) => e.message);\n        addMessage((messages) => [...storedMessages, ...messages]);\n      }\n    );\n\n    pubnub.addListener({ message: handleMessage });\n    pubnub.addListener({ signal: handleSignal });\n    pubnub.addListener({ presence: handlePresence });\n    pubnub.subscribe({ channels, withPresence: true });\n  }, [pubnub, channels]);\n\n  const sendMessage = ({ message = {}, callback = () => {} }) => {\n    if (message) {\n      pubnub.publish({ channel: channels[0], message }).then(() => {\n        sendTypingSignal(false);\n        setMessage(\"\");\n        callback();\n      });\n    }\n  };\n\n  const sendTypingSignal = (isTyping = true) => {\n    pubnub\n      .signal({\n        channel,\n        message: isTyping ? \"typing_on\" : \"typing_off\",\n      })\n      .then((response) => {});\n  };\n  // pubnub\n\n  const isUsernameValid = (name) => {\n    const i = whoIsHere.current.findIndex((occupant) => {\n      return occupant.name === name;\n    });\n    return name !== \"\" && (name === username || i === -1);\n  };\n\n  useEffect(() => {\n    pubnub.setState({\n      state: { username, id: userId, image: avatar },\n      channels: [channel],\n    });\n  }, [username, avatar, userId]);\n\n  return (\n    <Context.Provider\n      value={{\n        userId,\n        username,\n        setUsername,\n        avatar,\n        setAvatar,\n        screen,\n        setScreen,\n        collapsed,\n        setCollapsed,\n        message,\n        setMessage,\n        messages,\n        sendMessage,\n        isUsernameValid,\n        whoIsTyping,\n        personTyping,\n        sendTypingSignal,\n      }}\n    >\n      {!collapsed && (\n        <Container palette=\"dark\">\n          <TopBar>\n            <Button\n              title=\"get the hell outta here!\"\n              palette=\"none\"\n              hoverpalette=\"darkgrey\"\n              activepalette=\"grey\"\n              onClick={(e) => {\n                setCollapsed(true);\n              }}\n            >\n              <Icon name=\"runner\" palette=\"white\" />\n            </Button>\n            <Text size=\"small\" weight=\"bold\">\n              welcome!\n            </Text>\n            <Button\n              title=\"preferences\"\n              palette=\"none\"\n              hoverpalette=\"darkgrey\"\n              activepalette=\"grey\"\n              clear={screen === tokens.screens.welcome}\n              onClick={\n                screen !== tokens.screens.welcome\n                  ? (e) => {\n                      setScreen(tokens.screens.settings);\n                    }\n                  : null\n              }\n            >\n              {screen !== tokens.screens.welcome && (\n                <Icon name=\"gear\" palette=\"white\" />\n              )}\n            </Button>\n          </TopBar>\n\n          {screen === tokens.screens.chat && <Chat />}\n          {screen === tokens.screens.welcome && <Welcome />}\n          {screen === tokens.screens.settings && <Settings />}\n        </Container>\n      )}\n      {collapsed && (\n        <CollapsedChatContainer>\n          <Button\n            clear\n            onClick={(e) => {\n              setCollapsed(false);\n            }}\n          >\n            <Icon name={icon} scale=\"sc+2\" palette={iconcolor} />\n          </Button>\n        </CollapsedChatContainer>\n      )}\n    </Context.Provider>\n  );\n};\n\nexport const useChatWidget = () => {\n  return useContext(Context);\n};\n\nexport default ChatWidget;\n","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Chat.js",["62"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/styled/index.js",["63","64","65","66","67","68","69","70","71","72"],"import React, { useRef, useState, useEffect } from \"react\";\nimport styled, { css, keyframes } from \"styled-components\";\nimport tokens from \"../tokens\";\nimport icons from \"../../../icons\";\nimport day from \"../../../utils/day\";\n\nconst fadeIn = keyframes`\n  from {\n    transform: scale(.85);\n    opacity: 0;\n  }\n\n  to: {\n    transform: scale(1);\n    opacity: 1;\n  }\n`;\n\nconst flash = keyframes`\n  0% {\n    transform: scale(1);\n    opacity: 1;\n  }\n  50% {\n    transform: scale(1);\n    opacity: 0.7;\n  }\n  100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n\n  \n`;\n\nexport const FadeIn = styled.div`\n  // opacity: 0;\n  animation: ${fadeIn} 0.2s linear;\n`;\n\nexport const Flash = styled.div`\n  // opacity: 0;\n  animation: ${flash} 1s linear infinite;\n`;\n\nexport const CollapsedChatContainer = styled.div`\n  z-index: 99999;\n  position: fixed;\n  bottom: ${tokens.padding[\"sp+3\"]};\n  right: ${tokens.padding[\"sp+3\"]};\n`;\n\nexport const Container = styled.div`\n  z-index: 99999;\n  // desktop\n  @media only screen and (min-width: 600px) {\n    position: fixed;\n    // size\n    width: 400px;\n    height: calc(100vh - 32px);\n\n    // margins\n    top: ${tokens.padding[\"sp+2\"]};\n    bottom: ${tokens.padding[\"sp+2\"]};\n    right: ${tokens.padding[\"sp+2\"]};\n\n    border-radius: ${tokens.radius[\"ra+1\"]};\n  }\n  // mobile\n  @media only screen and (max-width: 600px) {\n    position: absolute;\n    width: calc(100vw - 4px);\n    // height: calc(${window.innerHeight}px - 4px);\n    height: calc(100% - 4px);\n    top: 0px;\n    left: 0px;\n    margin: 2px;\n    border-radius: ${tokens.radius[\"ra+1\"]};\n  }\n\n  // display\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  // color\n  background: ${(props) => tokens.palette[props.palette]};\n  box-shadow: 0px 0px 12px 6px rgba(0, 0, 0, 0.4);\n`;\n\nContainer.defaultProps = { palette: \"dark\" };\n\nexport const Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n`;\n\nexport const Separator = styled.div`\n  width: 100%;\n  box-sizing: border-box;\n  padding: ${(props) => tokens.padding[props.spacing]};\n  border-bottom: ${(props) => tokens.border[props.border]} solid\n    ${(props) => tokens.palette[props.palette]};\n  border-radius: ${tokens.radius[\"ra+4\"]};\n`;\nSeparator.defaultProps = { spacing: \"sp+0\", border: \"bo+0\", palette: \"white\" };\n\nexport const TopBar = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  padding-left: ${tokens.padding[\"sp+3\"]};\n  padding-right: ${tokens.padding[\"sp+3\"]};\n  padding-top: ${tokens.padding[\"sp+2\"]};\n  padding-bottom: ${tokens.padding[\"sp+2\"]};\n\n  position: static;\n  box-sizing: border-box;\n  width: 100%;\n  left: 0px;\n  top: 0px;\n`;\n\nexport const BottomBar = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: ${tokens.padding[\"sp+2\"]};\n\n  position: static;\n  box-sizing: border-box;\n  width: 100%;\n  left: 0px;\n  bottom: 0px;\n`;\n\nexport const Button = styled.button`\n  display: block;\n  // background color\n  background: ${(props) =>\n    !props.clear ? tokens.palette[props.palette] : tokens.palette[\"none\"]};\n\n  // border\n  border: ${(props) => tokens.border[props.border]} solid\n    ${(props) => tokens.palette[props.palette]};\n\n  // radius\n  border-radius: ${(props) => tokens.radius[props.radius]};\n\n  // spacing\n  padding: ${(props) => tokens.padding[props.padding]};\n  margin: ${(props) => tokens.margin[props.margin]};\n\n  // animation\n  transition: all 0.2s;\n\n  // hover\n  &:hover {\n    background: ${(props) =>\n      !props.clear\n        ? tokens.palette[props.hoverpalette]\n        : tokens.palette[\"none\"]};\n    border: ${(props) => tokens.border[props.border]} solid\n      ${(props) =>\n        !props.clear\n          ? tokens.palette[props.hoverpalette]\n          : tokens.palette[\"none\"]};\n\n    & > svg > * {\n      ${(props) =>\n        props.clear\n          ? css`\n              fill: ${(props) => tokens.palette[props.hoverpalette]};\n            `\n          : \"\"}\n    }\n  }\n  &:active {\n    background: ${(props) =>\n      !props.clear\n        ? tokens.palette[props.activepalette]\n        : tokens.palette[\"none\"]};\n    border: ${(props) => tokens.border[props.border]} solid\n      ${(props) =>\n        !props.clear\n          ? tokens.palette[props.activepalette]\n          : tokens.palette[\"none\"]};\n\n    & > svg > * {\n      ${(props) =>\n        props.clear\n          ? css`\n              fill: ${(props) => tokens.palette[props.activepalette]};\n            `\n          : \"\"}\n    }\n  }\n\n  // cursor\n\n  cursor: ${(props) => (!props.onClick ? \"default\" : \"pointer\")};\n`;\n\nButton.defaultProps = {\n  palette: \"none\",\n  hoverpalette: \"grey\",\n  activepalette: \"lightgrey\",\n  radius: \"ra+1\",\n  padding: \"sp+1\",\n  margin: \"sp+0\",\n  border: \"bo+0\",\n};\n\nexport const Icon = (props) => {\n  const { name } = props;\n  if (!(name in icons)) {\n    throw \"Specified icon not in icons.\";\n  }\n\n  let palette = props.palette;\n  if (!palette) palette = \"lightgrey\";\n\n  let scale = props.scale;\n  if (!scale) scale = \"sc+0\";\n  const Svg = icons[name];\n  return (\n    <Svg\n      style={{\n        width: tokens.iconscale[props.scale],\n        height: tokens.iconscale[props.scale],\n        fill: tokens.palette[props.palette],\n      }}\n    />\n  );\n};\n\nexport const Text = styled.text`\n  font-family: ${(props) => tokens.font[props.font]};\n  font-style: normal;\n  font-weight: ${(props) => tokens.fontweight[props.weight]};\n  font-size: ${(props) => tokens.fontsize[props.size]};\n  line-height: ${(props) => tokens.fontlineheight[props.size]};\n  color: ${(props) => tokens.palette[props.palette]};\n  text-align: ${(props) => props.align};\n`;\n\nText.defaultProps = {\n  font: \"regular\",\n  size: \"small\",\n  weight: \"regular\",\n  palette: \"white\",\n  align: \"left\",\n};\n\nexport const StyledTextInput = styled.input`\n  width: 100%;\n  background: ${(props) => tokens.palette.darkgrey};\n  border-radius: ${tokens.radius[\"ra+1\"]};\n  border: 0px;\n  padding: ${tokens.padding[\"sp+2\"]};\n  box-sizing: border-box;\n\n  // placeholder\n  ::-webkit-input-placeholder {\n    font-style: normal;\n    font-family: ${(props) => tokens.font[props.font]};\n    font-weight: ${(props) => tokens.fontweight[props.weight]};\n    font-size: ${(props) => tokens.fontsize[props.size]};\n    line-height: ${(props) => tokens.fontlineheight[props.size]};\n    color: ${tokens.palette.grey};\n  }\n\n  &:focus {\n    box-shadow: 0 0 0 2px ${tokens.palette.grey} inset;\n  }\n\n  transition: box-shadow 0.2s;\n\n  // text input\n  font-style: normal;\n  font-family: ${(props) => tokens.font[props.font]};\n  font-weight: ${(props) => tokens.fontweight[props.weight]};\n  font-size: ${(props) => tokens.fontsize[props.size]};\n  line-height: ${(props) => tokens.fontlineheight[props.size]};\n  color: ${tokens.palette.white};\n`;\n\nStyledTextInput.defaultProps = {\n  font: \"regular\",\n  size: \"small\",\n  weight: \"regular\",\n};\nconst InputContainer = styled.div`\n  position: relative;\n  width: 100%;\n`;\nconst InputAction = styled(Button)`\n  position: absolute;\n  // z-index: 99999999;\n  right: 0px;\n  bottom: 4px;\n  opacity: ${(props) => (props.visible ? 1 : 0)};\n`;\n\nInputAction.defaultProps = { visible: false };\n\nexport const TextInput = (props) => {\n  const { onSubmit = (value) => {}, action } = props;\n\n  return (\n    <InputContainer>\n      <StyledTextInput\n        {...props}\n        onKeyUp={(event) => {\n          if (event.key === \"Enter\" && event.target.value !== \"\") {\n            onSubmit(event.target.value);\n          }\n        }}\n      />\n      {action && (\n        <InputAction\n          clear\n          title={action.title}\n          hoverpalette={action.palette}\n          activepalette={action.onClick ? action.activepalette : action.palette}\n          visible={props.value.length < 30}\n          onClick={action.onClick}\n        >\n          <Icon name={action.icon} palette={action.palette} />\n        </InputAction>\n      )}\n    </InputContainer>\n  );\n};\nexport const WelcomeContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  padding-left: ${tokens.padding[\"sp+3\"]};\n  padding-right: ${tokens.padding[\"sp+3\"]};\n`;\n\nconst GridSelectContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  justify-content: space-between;\n  width: 100%;\n\n  background: ${(props) => tokens.palette[props.palette]};\n  border-radius: ${tokens.radius[\"ra+1\"]};\n`;\n\nGridSelectContainer.defaultProps = { palette: \"darkgrey\" };\n\nconst ImageGrid = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n  align-items: flex-start;\n  width: 100%;\n  margin: ${tokens.margin[\"sp+1\"]};\n`;\n\nconst ImageInGrid = styled.img`\n  width: 48px;\n  height: auto;\n\n  &:hover {\n    opacity: 0.7;\n  }\n\n  // border: ${(props) => tokens.border[props.border]} solid\n  //   ${(props) => tokens.palette[props.palette]};\n  border-radius: ${tokens.radius[\"ra+1\"]};\n\n  cursor: pointer;\n\n  transition: all 0.2s;\n`;\n\nconst ImageInGridContainer = styled.div`\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n\n  margin: ${tokens.margin[\"sp+1\"]};\n  box-shadow: 0 0 0 ${(props) => tokens.border[props.border]}\n    ${(props) => tokens.palette[props.palette]};\n  border-radius: ${tokens.radius[\"ra+1\"]};\n\n  transition: all 0.2s;\n`;\n\nImageInGridContainer.defaultProps = {\n  palette: \"green\",\n  border: \"bo+0\",\n};\nexport const GridSelectImage = (props) => {\n  const { onSelect, action, images = [], value = \"\" } = props;\n  const [selected, setSelected] = useState(\n    images.findIndex((e) => e === value)\n  );\n\n  return (\n    <GridSelectContainer>\n      <ImageGrid>\n        {images.map((image, i) => (\n          <ImageInGridContainer\n            key={`grod-image-select-${i}`}\n            palette=\"green\"\n            border={selected === i ? \"bo+2\" : \"bo+0\"}\n          >\n            <ImageInGrid\n              src={image}\n              onClick={(e) => {\n                setSelected(i);\n                onSelect(image);\n              }}\n            />\n          </ImageInGridContainer>\n        ))}\n      </ImageGrid>\n      {action && (\n        <Button\n          clear\n          hoverpalette={action.palette}\n          activepalette={action.onClick ? action.activepalette : action.palette}\n          onClick={action.onClick}\n        >\n          <Icon name={action.icon} palette={action.palette} />\n        </Button>\n      )}\n    </GridSelectContainer>\n  );\n};\n\nexport const ChatContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center;\n  box-sizing: border-box;\n  padding-left: ${tokens.padding[\"sp+3\"]};\n  padding-right: ${tokens.padding[\"sp+3\"]};\n\n  position: static;\n  width: 100%;\n  height: 100%;\n\n  overflow-y: scroll;\n\n  // border: 2px solid red;\n`;\n\nexport const ChatContainerChild = styled.div`\n  width: 100%;\n`;\n\nconst MessageContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n\n  position: static;\n  width: 100%;\n\n  // border: 2px solid red;\n`;\nconst MessageSenderContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst MessageSenderName = styled(Text)`\n  margin-left: ${tokens.padding[\"sp+2\"]};\n`;\n\nMessageSenderName.defaultProps = {\n  font: \"regular\",\n  size: \"small\",\n  weight: \"bold\",\n  palette: \"white\",\n};\n\nconst MessageSenderImage = styled.img`\n  width: 32px;\n  height: auto;\n  border-radius: ${tokens.radius[\"ra+1\"]};\n`;\n\nconst MessageBodyContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-end;\n  justify-content: space-between;\n\n  width: 100%;\n`;\n\nconst MessageText = styled(Text)`\n  width: 100%;\n  word-break: break-word;\n`;\n\nMessageText.defaultProps = {\n  font: \"regular\",\n  size: \"small\",\n  weight: \"regular\",\n  palette: \"white\",\n};\n\nconst MessageTime = styled(Text)`\n  opacity: 50%;\n`;\n\nMessageTime.defaultProps = {\n  font: \"regular\",\n  size: \"extrasmall\",\n  weight: \"bold\",\n  palette: \"white\",\n};\n\nconst MessageImage = styled.div``;\n\nconst getDateTime = (date) => {\n  const today = new Date();\n  let format;\n\n  // If date is today only display hour and minute\n  if (day.format(today, \"DD MM YYYY\") == day.format(date, \"DD MM YYYY\")) {\n    format = \"HH:mm\";\n  } else if (day.year(today) == day.year(date)) {\n    format = \"DD MMM HH:mm\";\n  } else {\n    format = \"DD MMM YYYY HH:mm\";\n  }\n\n  return day.format(date, format);\n};\n\nexport const TextMessage = (props) => {\n  const { message, onlybody = false } = props;\n  const { sender, text, createdAt } = message;\n  const time = getDateTime(createdAt);\n  return (\n    <MessageContainer>\n      {!onlybody && (\n        <MessageSenderContainer>\n          <MessageSenderImage src={sender.image} />\n          <MessageSenderName>{sender.name}</MessageSenderName>\n        </MessageSenderContainer>\n      )}\n      <Separator spacing=\"sp+0.5\" />\n      <MessageBodyContainer>\n        <MessageText>{text}</MessageText>\n        <MessageTime>{time}</MessageTime>\n      </MessageBodyContainer>\n    </MessageContainer>\n  );\n};\n\nexport const ImageMessage = (props) => {\n  const { sender, text, image, onlybody } = props;\n};\n","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/utils/day/index.js",["73"],"import { isObject } from \"@doubco/wtf\";\nimport dayjs from \"dayjs\";\nimport localizedFormat from \"dayjs/plugin/localizedFormat\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\nimport customParseFormat from \"dayjs/plugin/customParseFormat\";\nimport isBetween from \"dayjs/plugin/isBetween\";\n\nimport en_gb from \"dayjs/locale/en-gb\";\nimport tr from \"dayjs/locale/tr\";\n\ndayjs.extend(customParseFormat);\ndayjs.extend(localizedFormat);\ndayjs.extend(relativeTime);\ndayjs.extend(isBetween);\nclass Day {\n  constructor(props) {\n    const en = dayjs.en;\n\n    this.instance = dayjs;\n\n    // console.log(\"this.localeData\", this.localeData);\n    this.localeDatas = {\n      en,\n      en_gb,\n    };\n    this.localeData = this.localeDatas.en;\n  }\n\n  getCurrentLocale() {\n    return this.localeData.name;\n  }\n\n  day(...args) {\n    return this.instance(...args).locale(this.getCurrentLocale());\n  }\n\n  format(date, f, options = {}) {\n    let format = f;\n\n    if (format) {\n      Object.keys(this.localeData.formats).forEach((k) => {\n        format = format.replace(new RegExp(k), this.localeData.formats[k]);\n      });\n    }\n\n    return this.day(date).format(format);\n  }\n\n  formatDistance(date, from, options = { isRaw: false }) {\n    return this.day(date).from(from, options.isRaw);\n  }\n\n  toDate(date, options = {}) {\n    let opts = { ...options };\n\n    if (opts.format) {\n      Object.keys(this.localeData.formats).forEach((k) => {\n        opts.format = opts.format.replace(\n          new RegExp(k),\n          this.localeData.formats[k]\n        );\n      });\n    }\n    // console.log(\"toDate\", this.day(date, opts).toDate());\n    return this.day(date, opts).toDate();\n  }\n\n  toJSON(date, options = {}) {\n    return this.day(date, options).toJSON();\n  }\n\n  isValid(date, options = {}) {\n    return this.day(date, options).isValid();\n  }\n\n  date(date, options = {}) {\n    return this.day(date).date();\n  }\n\n  diff(date, compared, unit, options = {}) {\n    return this.day(date).diff(compared, unit, options.float);\n  }\n\n  weekday(date, options = {}) {\n    return this.day(date).day();\n  }\n\n  month(date, options = {}) {\n    return this.day(date).month();\n  }\n\n  year(date, options = {}) {\n    return this.day(date).year();\n  }\n\n  hour(date, options = {}) {\n    return this.day(date).hour();\n  }\n\n  minute(date, options = {}) {\n    return this.day(date).minute();\n  }\n\n  daysInMonth(date, options = {}) {\n    return this.day(date).daysInMonth();\n  }\n\n  set(unit, date, value, options = {}) {\n    return this.day(date).set(unit, value);\n  }\n\n  add(unit, date, value, options = {}) {\n    return this.day(date).add(value, unit);\n  }\n\n  subtract(unit, date, value, options = {}) {\n    return this.day(date).subtract(value, unit);\n  }\n\n  isBetween(date, start, end, options = { type: null }) {\n    return this.day(date).isBetween(start, end, options.type);\n  }\n\n  getFormat(format, options = {}) {\n    return this.localeData.formats[format];\n  }\n\n  getLocaleData(locale = this.getCurrentLocale(), options = {}) {\n    return this.localeDatas[locale];\n  }\n\n  getWeekdays(i) {\n    return this.localeData.weekdays[i] || \"\";\n  }\n\n  getWeekdaysShort(i) {\n    return this.localeData.weekdaysShort\n      ? this.localeData.weekdaysShort[i]\n      : this.getWeekdays(i).substr(0, 3);\n  }\n\n  getFormatAsArray() {\n    let data = this.localeData;\n    let date = [];\n    let time = [\"h\", \"m\"];\n    let l = data.formats[\"L\"];\n    let lt = data.formats[\"LT\"];\n    l = l.toLowerCase().replace(/-/g, \".\").replace(/\\//g, \".\");\n    date = l.split(\".\").map((i) => i.substr(0, 1));\n\n    if (lt.includes(\"A\")) {\n      time.push(\"a\");\n    }\n\n    return {\n      date,\n      time,\n    };\n  }\n\n  createContext(locale) {\n    return this.localeDatas[locale];\n  }\n\n  registerContext(context) {\n    if (context) {\n      this.localeData = context;\n      this.localeDatas[context.name] = context;\n      this.instance.locale(context);\n    }\n  }\n\n  locale(locale, callback) {\n    if (isObject(locale)) {\n      this.localeData = locale;\n      this.localeDatas[locale.name] = locale;\n      this.instance.locale(locale);\n      if (callback) callback();\n    } else {\n      if (this.localeDatas[locale]) {\n        this.localeData = this.localeDatas[locale];\n        if (callback) callback();\n      } else {\n        this.localeDatas[locale] = this.localeData;\n        this.instance.locale(locale);\n        if (callback) callback();\n      }\n    }\n  }\n}\n\nexport default new Day();\n","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/icons/index.js",["74"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Welcome.js",["75","76","77","78"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Settings.js",["79","80","81"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/GlobalStyle.js",["82"],{"ruleId":"83","severity":1,"message":"84","line":1,"column":1,"nodeType":"85","endLine":74,"endColumn":3},{"ruleId":"83","severity":1,"message":"84","line":1,"column":1,"nodeType":"85","endLine":8,"endColumn":3},{"ruleId":"83","severity":1,"message":"86","line":21,"column":1,"nodeType":"85","endLine":41,"endColumn":3},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":42,"column":20,"nodeType":"93","messageId":"94","endLine":42,"endColumn":31},{"ruleId":"95","severity":1,"message":"96","line":121,"column":6,"nodeType":"97","endLine":121,"endColumn":24,"suggestions":"98"},{"ruleId":"95","severity":1,"message":"99","line":155,"column":6,"nodeType":"97","endLine":155,"endColumn":32,"suggestions":"100"},{"ruleId":"91","severity":1,"message":"101","line":1,"column":17,"nodeType":"93","messageId":"94","endLine":1,"endColumn":25},{"ruleId":"91","severity":1,"message":"102","line":1,"column":17,"nodeType":"93","messageId":"94","endLine":1,"endColumn":23},{"ruleId":"91","severity":1,"message":"103","line":1,"column":35,"nodeType":"93","messageId":"94","endLine":1,"endColumn":44},{"ruleId":"104","severity":1,"message":"105","line":222,"column":5,"nodeType":"106","messageId":"107","endLine":222,"endColumn":42},{"ruleId":"91","severity":1,"message":"108","line":535,"column":7,"nodeType":"93","messageId":"94","endLine":535,"endColumn":19},{"ruleId":"109","severity":1,"message":"110","line":542,"column":39,"nodeType":"111","messageId":"112","endLine":542,"endColumn":41},{"ruleId":"109","severity":1,"message":"110","line":544,"column":30,"nodeType":"111","messageId":"112","endLine":544,"endColumn":32},{"ruleId":"91","severity":1,"message":"113","line":575,"column":11,"nodeType":"93","messageId":"94","endLine":575,"endColumn":17},{"ruleId":"91","severity":1,"message":"114","line":575,"column":19,"nodeType":"93","messageId":"94","endLine":575,"endColumn":23},{"ruleId":"91","severity":1,"message":"115","line":575,"column":25,"nodeType":"93","messageId":"94","endLine":575,"endColumn":30},{"ruleId":"91","severity":1,"message":"116","line":575,"column":32,"nodeType":"93","messageId":"94","endLine":575,"endColumn":40},{"ruleId":"91","severity":1,"message":"117","line":9,"column":8,"nodeType":"93","messageId":"94","endLine":9,"endColumn":10},{"ruleId":"83","severity":1,"message":"84","line":11,"column":1,"nodeType":"85","endLine":21,"endColumn":3},{"ruleId":"91","severity":1,"message":"102","line":1,"column":17,"nodeType":"93","messageId":"94","endLine":1,"endColumn":23},{"ruleId":"91","severity":1,"message":"118","line":3,"column":3,"nodeType":"93","messageId":"94","endLine":3,"endColumn":9},{"ruleId":"91","severity":1,"message":"119","line":7,"column":3,"nodeType":"93","messageId":"94","endLine":7,"endColumn":7},{"ruleId":"95","severity":1,"message":"120","line":37,"column":6,"nodeType":"97","endLine":37,"endColumn":16,"suggestions":"121"},{"ruleId":"91","severity":1,"message":"118","line":3,"column":3,"nodeType":"93","messageId":"94","endLine":3,"endColumn":9},{"ruleId":"91","severity":1,"message":"119","line":8,"column":3,"nodeType":"93","messageId":"94","endLine":8,"endColumn":7},{"ruleId":"95","severity":1,"message":"120","line":38,"column":6,"nodeType":"97","endLine":38,"endColumn":16,"suggestions":"122"},{"ruleId":"91","severity":1,"message":"123","line":1,"column":8,"nodeType":"93","messageId":"94","endLine":1,"endColumn":14},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","Assign arrow function to a variable before exporting as module default","no-native-reassign",["124"],"no-negated-in-lhs",["125"],"no-unused-vars","'setChannels' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'channel', 'handlePresence', and 'handleSignal'. Either include them or remove the dependency array.","ArrayExpression",["126"],"React Hook useEffect has missing dependencies: 'channel' and 'pubnub'. Either include them or remove the dependency array.",["127"],"'useState' is defined but never used.","'useRef' is defined but never used.","'useEffect' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'MessageImage' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'sender' is assigned a value but never used.","'text' is assigned a value but never used.","'image' is assigned a value but never used.","'onlybody' is assigned a value but never used.","'tr' is defined but never used.","'TopBar' is defined but never used.","'Icon' is defined but never used.","React Hook useEffect has a missing dependency: 'chatWidget'. Either include it or remove the dependency array.",["128"],["129"],"'styled' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},{"desc":"134","fix":"136"},"Update the dependencies array to be: [pubnub, channels, handleSignal, handlePresence, channel]",{"range":"137","text":"138"},"Update the dependencies array to be: [username, avatar, userId, pubnub, channel]",{"range":"139","text":"140"},"Update the dependencies array to be: [chatWidget, username]",{"range":"141","text":"142"},{"range":"143","text":"142"},[3380,3398],"[pubnub, channels, handleSignal, handlePresence, channel]",[4206,4232],"[username, avatar, userId, pubnub, channel]",[889,899],"[chatWidget, username]",[903,913]]