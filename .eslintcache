[{"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/tokens.js":"1","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/Config.js":"2","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/App.js":"3","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/index.js":"4","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/index.js":"5","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Chat.js":"6","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/styled/index.js":"7","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/utils/day/index.js":"8","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/icons/index.js":"9","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Welcome.js":"10","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Settings.js":"11","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/GlobalStyle.js":"12"},{"size":1382,"mtime":1610841159956,"results":"13","hashOfConfig":"14"},{"size":292,"mtime":1610839920579,"results":"15","hashOfConfig":"14"},{"size":874,"mtime":1610847517400,"results":"16","hashOfConfig":"14"},{"size":372,"mtime":1610839196155,"results":"17","hashOfConfig":"14"},{"size":6277,"mtime":1610851976422,"results":"18","hashOfConfig":"14"},{"size":3570,"mtime":1610852884285,"results":"19","hashOfConfig":"14"},{"size":13233,"mtime":1610852423346,"results":"20","hashOfConfig":"14"},{"size":4416,"mtime":1609829706749,"results":"21","hashOfConfig":"14"},{"size":728,"mtime":1610159801018,"results":"22","hashOfConfig":"14"},{"size":3795,"mtime":1610848484872,"results":"23","hashOfConfig":"14"},{"size":3821,"mtime":1610848739968,"results":"24","hashOfConfig":"14"},{"size":521,"mtime":1610209341661,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"16klvty",{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/tokens.js",["54"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/Config.js",["55"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/App.js",["56"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/index.js",[],["57","58"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/index.js",["59","60"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Chat.js",["61"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/styled/index.js",["62","63","64","65","66","67","68","69","70","71"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/utils/day/index.js",["72"],"import { isObject } from \"@doubco/wtf\";\nimport dayjs from \"dayjs\";\nimport localizedFormat from \"dayjs/plugin/localizedFormat\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\nimport customParseFormat from \"dayjs/plugin/customParseFormat\";\nimport isBetween from \"dayjs/plugin/isBetween\";\n\nimport en_gb from \"dayjs/locale/en-gb\";\nimport tr from \"dayjs/locale/tr\";\n\ndayjs.extend(customParseFormat);\ndayjs.extend(localizedFormat);\ndayjs.extend(relativeTime);\ndayjs.extend(isBetween);\nclass Day {\n  constructor(props) {\n    const en = dayjs.en;\n\n    this.instance = dayjs;\n\n    // console.log(\"this.localeData\", this.localeData);\n    this.localeDatas = {\n      en,\n      en_gb,\n    };\n    this.localeData = this.localeDatas.en;\n  }\n\n  getCurrentLocale() {\n    return this.localeData.name;\n  }\n\n  day(...args) {\n    return this.instance(...args).locale(this.getCurrentLocale());\n  }\n\n  format(date, f, options = {}) {\n    let format = f;\n\n    if (format) {\n      Object.keys(this.localeData.formats).forEach((k) => {\n        format = format.replace(new RegExp(k), this.localeData.formats[k]);\n      });\n    }\n\n    return this.day(date).format(format);\n  }\n\n  formatDistance(date, from, options = { isRaw: false }) {\n    return this.day(date).from(from, options.isRaw);\n  }\n\n  toDate(date, options = {}) {\n    let opts = { ...options };\n\n    if (opts.format) {\n      Object.keys(this.localeData.formats).forEach((k) => {\n        opts.format = opts.format.replace(\n          new RegExp(k),\n          this.localeData.formats[k]\n        );\n      });\n    }\n    // console.log(\"toDate\", this.day(date, opts).toDate());\n    return this.day(date, opts).toDate();\n  }\n\n  toJSON(date, options = {}) {\n    return this.day(date, options).toJSON();\n  }\n\n  isValid(date, options = {}) {\n    return this.day(date, options).isValid();\n  }\n\n  date(date, options = {}) {\n    return this.day(date).date();\n  }\n\n  diff(date, compared, unit, options = {}) {\n    return this.day(date).diff(compared, unit, options.float);\n  }\n\n  weekday(date, options = {}) {\n    return this.day(date).day();\n  }\n\n  month(date, options = {}) {\n    return this.day(date).month();\n  }\n\n  year(date, options = {}) {\n    return this.day(date).year();\n  }\n\n  hour(date, options = {}) {\n    return this.day(date).hour();\n  }\n\n  minute(date, options = {}) {\n    return this.day(date).minute();\n  }\n\n  daysInMonth(date, options = {}) {\n    return this.day(date).daysInMonth();\n  }\n\n  set(unit, date, value, options = {}) {\n    return this.day(date).set(unit, value);\n  }\n\n  add(unit, date, value, options = {}) {\n    return this.day(date).add(value, unit);\n  }\n\n  subtract(unit, date, value, options = {}) {\n    return this.day(date).subtract(value, unit);\n  }\n\n  isBetween(date, start, end, options = { type: null }) {\n    return this.day(date).isBetween(start, end, options.type);\n  }\n\n  getFormat(format, options = {}) {\n    return this.localeData.formats[format];\n  }\n\n  getLocaleData(locale = this.getCurrentLocale(), options = {}) {\n    return this.localeDatas[locale];\n  }\n\n  getWeekdays(i) {\n    return this.localeData.weekdays[i] || \"\";\n  }\n\n  getWeekdaysShort(i) {\n    return this.localeData.weekdaysShort\n      ? this.localeData.weekdaysShort[i]\n      : this.getWeekdays(i).substr(0, 3);\n  }\n\n  getFormatAsArray() {\n    let data = this.localeData;\n    let date = [];\n    let time = [\"h\", \"m\"];\n    let l = data.formats[\"L\"];\n    let lt = data.formats[\"LT\"];\n    l = l.toLowerCase().replace(/-/g, \".\").replace(/\\//g, \".\");\n    date = l.split(\".\").map((i) => i.substr(0, 1));\n\n    if (lt.includes(\"A\")) {\n      time.push(\"a\");\n    }\n\n    return {\n      date,\n      time,\n    };\n  }\n\n  createContext(locale) {\n    return this.localeDatas[locale];\n  }\n\n  registerContext(context) {\n    if (context) {\n      this.localeData = context;\n      this.localeDatas[context.name] = context;\n      this.instance.locale(context);\n    }\n  }\n\n  locale(locale, callback) {\n    if (isObject(locale)) {\n      this.localeData = locale;\n      this.localeDatas[locale.name] = locale;\n      this.instance.locale(locale);\n      if (callback) callback();\n    } else {\n      if (this.localeDatas[locale]) {\n        this.localeData = this.localeDatas[locale];\n        if (callback) callback();\n      } else {\n        this.localeDatas[locale] = this.localeData;\n        this.instance.locale(locale);\n        if (callback) callback();\n      }\n    }\n  }\n}\n\nexport default new Day();\n","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/icons/index.js",["73"],"/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Welcome.js",["74","75","76","77"],"import React, { useRef, useEffect, useState, Fragment } from \"react\";\nimport {\n  TopBar,\n  WelcomeContainer,\n  GridSelectImage,\n  Button,\n  Icon,\n  Text,\n  TextInput,\n  Separator,\n} from \"./styled\";\nimport tokens from \"./tokens\";\nimport { useChatWidget } from \"./index\";\n\nconst Welcome = (props) => {\n  const chatWidget = useChatWidget();\n  const [username, setUsername] = useState(chatWidget.username);\n  const [avatar, setAvatar] = useState(chatWidget.avatar);\n\n  const [inputsValid, setInputsValid] = useState({\n    username: false,\n    avatar: false,\n  });\n\n  useEffect(() => {\n    // Change this part by checking if current\n    // username is valid\n    if (chatWidget.isUsernameValid(username)) {\n      setInputsValid((d) => {\n        return { ...d, username: true };\n      });\n    } else {\n      setInputsValid((d) => {\n        return { ...d, username: false };\n      });\n    }\n  }, [username]);\n\n  return (\n    <>\n      <WelcomeContainer>\n        <Text size=\"small\" weight=\"bold\">\n          choose a username and avatar.\n        </Text>\n        <Separator spacing=\"sp+1\" />\n        <TextInput\n          placeholder=\"your username\"\n          value={username}\n          onChange={(event) => {\n            setUsername(event.target.value);\n          }}\n          onSubmit={(val) => {}}\n          action={\n            inputsValid.username\n              ? {\n                  icon: \"check-circle\",\n                  palette: \"green\",\n                }\n              : {\n                  icon: \"circle\",\n                  palette: \"white\",\n                }\n          }\n        />\n        <Separator spacing=\"sp+1\" />\n        <GridSelectImage\n          images={[\n            process.env.PUBLIC_URL + \"/profiles/profiles-1.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-2.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-3.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-4.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-1.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-2.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-3.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-4.png\",\n          ]}\n          action={\n            inputsValid.avatar\n              ? {\n                  icon: \"check-circle\",\n                  palette: \"green\",\n                }\n              : {\n                  icon: \"circle\",\n                  palette: \"white\",\n                }\n          }\n          value={avatar}\n          onSelect={(url) => {\n            setAvatar(url);\n            setInputsValid((d) => {\n              return { ...d, avatar: true };\n            });\n          }}\n        />\n        <Separator spacing=\"sp+1\" />\n\n        <Button\n          style={{ width: \"100%\" }}\n          padding=\"sp+2\"\n          palette={\n            inputsValid.username && inputsValid.avatar ? \"purple\" : \"grey\"\n          }\n          hoverpalette={\n            inputsValid.username && inputsValid.avatar ? \"darkpurple\" : \"grey\"\n          }\n          activepalette={\n            inputsValid.username && inputsValid.avatar ? \"darkerpurple\" : \"grey\"\n          }\n          onClick={\n            inputsValid.username && inputsValid.avatar\n              ? (e) => {\n                  chatWidget.setAvatar(avatar);\n                  chatWidget.setUsername(username);\n                  chatWidget.addSender({\n                    id: chatWidget.userId,\n                    name: username,\n                    avatar,\n                  });\n                  chatWidget.setScreen(tokens.screens.chat);\n                }\n              : null\n          }\n        >\n          <Text size=\"small\" weight=\"bold\">\n            join\n          </Text>\n        </Button>\n      </WelcomeContainer>\n    </>\n  );\n};\n\nexport default Welcome;\n","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/components/ChatWidget/Settings.js",["78","79","80"],"import React, { useEffect, useState } from \"react\";\nimport {\n  TopBar,\n  WelcomeContainer,\n  TextInput,\n  GridSelectImage,\n  Button,\n  Icon,\n  Text,\n  Separator,\n} from \"./styled\";\nimport tokens from \"./tokens\";\n\nimport { useChatWidget } from \"./index\";\n\nconst Settings = (props) => {\n  const chatWidget = useChatWidget();\n  const [username, setUsername] = useState(chatWidget.username);\n  const [avatar, setAvatar] = useState(chatWidget.avatar);\n\n  const [inputsValid, setInputsValid] = useState({\n    username: chatWidget.isUsernameValid(username),\n    avatar: true,\n  });\n\n  useEffect(() => {\n    // Change this part by checking if current\n    // username is valid\n    if (chatWidget.isUsernameValid(username)) {\n      setInputsValid((d) => {\n        return { ...d, username: true };\n      });\n    } else {\n      setInputsValid((d) => {\n        return { ...d, username: false };\n      });\n    }\n  }, [username]);\n\n  return (\n    <>\n      <WelcomeContainer>\n        <Text size=\"small\" weight=\"bold\">\n          update a username and avatar.\n        </Text>\n        <Separator spacing=\"sp+1\" />\n        <TextInput\n          placeholder=\"your username\"\n          value={username}\n          onChange={(event) => {\n            setUsername(event.target.value);\n          }}\n          onSubmit={(val) => {}}\n          action={\n            inputsValid.username\n              ? {\n                  icon: \"check-circle\",\n                  palette: \"green\",\n                }\n              : {\n                  icon: \"circle\",\n                  palette: \"white\",\n                }\n          }\n        />\n        <Separator spacing=\"sp+1\" />\n        <GridSelectImage\n          images={[\n            process.env.PUBLIC_URL + \"/profiles/profiles-1.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-2.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-3.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-4.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-1.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-2.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-3.png\",\n            process.env.PUBLIC_URL + \"/profiles/profiles-4.png\",\n          ]}\n          action={\n            inputsValid.avatar\n              ? {\n                  icon: \"check-circle\",\n                  palette: \"green\",\n                }\n              : {\n                  icon: \"circle\",\n                  palette: \"white\",\n                }\n          }\n          value={avatar}\n          onSelect={(url) => {\n            setAvatar(url);\n            setInputsValid((d) => {\n              return { ...d, avatar: true };\n            });\n          }}\n        />\n        <Separator spacing=\"sp+1\" />\n\n        <Button\n          style={{ width: \"100%\" }}\n          padding=\"sp+2\"\n          palette={\n            inputsValid.username && inputsValid.avatar ? \"purple\" : \"grey\"\n          }\n          hoverpalette={\n            inputsValid.username && inputsValid.avatar ? \"darkpurple\" : \"grey\"\n          }\n          activepalette={\n            inputsValid.username && inputsValid.avatar ? \"darkerpurple\" : \"grey\"\n          }\n          onClick={\n            inputsValid.username && inputsValid.avatar\n              ? (e) => {\n                  chatWidget.setAvatar(avatar);\n                  chatWidget.setUsername(username);\n                  chatWidget.setScreen(tokens.screens.chat);\n                  chatWidget.addSender({\n                    id: chatWidget.userId,\n                    name: username,\n                    avatar,\n                  });\n                }\n              : null\n          }\n        >\n          <Text size=\"small\" weight=\"bold\">\n            save and return\n          </Text>\n        </Button>\n      </WelcomeContainer>\n    </>\n  );\n};\n\nexport default Settings;\n","/Users/yoelmolinas/Projects/Tutorial/chat-widget/src/GlobalStyle.js",["81"],{"ruleId":"82","severity":1,"message":"83","line":1,"column":1,"nodeType":"84","endLine":74,"endColumn":3},{"ruleId":"82","severity":1,"message":"83","line":1,"column":1,"nodeType":"84","endLine":8,"endColumn":3},{"ruleId":"82","severity":1,"message":"85","line":19,"column":1,"nodeType":"84","endLine":41,"endColumn":3},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":40,"column":20,"nodeType":"92","messageId":"93","endLine":40,"endColumn":31},{"ruleId":"94","severity":1,"message":"95","line":116,"column":6,"nodeType":"96","endLine":116,"endColumn":24,"suggestions":"97"},{"ruleId":"90","severity":1,"message":"98","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":25},{"ruleId":"90","severity":1,"message":"99","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":23},{"ruleId":"90","severity":1,"message":"100","line":1,"column":35,"nodeType":"92","messageId":"93","endLine":1,"endColumn":44},{"ruleId":"101","severity":1,"message":"102","line":222,"column":5,"nodeType":"103","messageId":"104","endLine":222,"endColumn":42},{"ruleId":"90","severity":1,"message":"105","line":535,"column":7,"nodeType":"92","messageId":"93","endLine":535,"endColumn":19},{"ruleId":"106","severity":1,"message":"107","line":542,"column":39,"nodeType":"108","messageId":"109","endLine":542,"endColumn":41},{"ruleId":"106","severity":1,"message":"107","line":544,"column":30,"nodeType":"108","messageId":"109","endLine":544,"endColumn":32},{"ruleId":"90","severity":1,"message":"110","line":575,"column":11,"nodeType":"92","messageId":"93","endLine":575,"endColumn":17},{"ruleId":"90","severity":1,"message":"111","line":575,"column":19,"nodeType":"92","messageId":"93","endLine":575,"endColumn":23},{"ruleId":"90","severity":1,"message":"112","line":575,"column":25,"nodeType":"92","messageId":"93","endLine":575,"endColumn":30},{"ruleId":"90","severity":1,"message":"113","line":575,"column":32,"nodeType":"92","messageId":"93","endLine":575,"endColumn":40},{"ruleId":"90","severity":1,"message":"114","line":9,"column":8,"nodeType":"92","messageId":"93","endLine":9,"endColumn":10},{"ruleId":"82","severity":1,"message":"83","line":11,"column":1,"nodeType":"84","endLine":21,"endColumn":3},{"ruleId":"90","severity":1,"message":"99","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":23},{"ruleId":"90","severity":1,"message":"115","line":3,"column":3,"nodeType":"92","messageId":"93","endLine":3,"endColumn":9},{"ruleId":"90","severity":1,"message":"116","line":7,"column":3,"nodeType":"92","messageId":"93","endLine":7,"endColumn":7},{"ruleId":"94","severity":1,"message":"117","line":37,"column":6,"nodeType":"96","endLine":37,"endColumn":16,"suggestions":"118"},{"ruleId":"90","severity":1,"message":"115","line":3,"column":3,"nodeType":"92","messageId":"93","endLine":3,"endColumn":9},{"ruleId":"90","severity":1,"message":"116","line":8,"column":3,"nodeType":"92","messageId":"93","endLine":8,"endColumn":7},{"ruleId":"94","severity":1,"message":"117","line":38,"column":6,"nodeType":"96","endLine":38,"endColumn":16,"suggestions":"119"},{"ruleId":"90","severity":1,"message":"120","line":1,"column":8,"nodeType":"92","messageId":"93","endLine":1,"endColumn":14},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","Assign arrow function to a variable before exporting as module default","no-native-reassign",["121"],"no-negated-in-lhs",["122"],"no-unused-vars","'setChannels' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'channel', 'handleMessage', and 'handleSignal'. Either include them or remove the dependency array.","ArrayExpression",["123"],"'useState' is defined but never used.","'useRef' is defined but never used.","'useEffect' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'MessageImage' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'sender' is assigned a value but never used.","'text' is assigned a value but never used.","'image' is assigned a value but never used.","'onlybody' is assigned a value but never used.","'tr' is defined but never used.","'TopBar' is defined but never used.","'Icon' is defined but never used.","React Hook useEffect has a missing dependency: 'chatWidget'. Either include it or remove the dependency array.",["124"],["125"],"'styled' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},{"desc":"128","fix":"130"},"Update the dependencies array to be: [pubnub, channels, handleMessage, handleSignal, channel]",{"range":"131","text":"132"},"Update the dependencies array to be: [chatWidget, username]",{"range":"133","text":"134"},{"range":"135","text":"134"},[3143,3161],"[pubnub, channels, handleMessage, handleSignal, channel]",[889,899],"[chatWidget, username]",[903,913]]